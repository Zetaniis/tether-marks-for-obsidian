/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VimMarksImpl
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/ui/MarkListModal.ts
var import_obsidian2 = require("obsidian");

// src/utils/defaultValues.ts
var modalDefaultKeybinds = {
  up: ["ctrl+k", "ctrl+p"],
  down: ["ctrl+j", "ctrl+n"],
  delete: ["ctrl+d"],
  select: ["Enter"],
  cancel: ["Escape"]
};
var modalDefaultKeybindsMac = {
  up: ["cmd+k", "cmd+p"],
  down: ["cmd+j", "cmd+n"],
  delete: ["cmd+d"],
  select: ["Enter"],
  cancel: ["Escape"]
};
var modalPlaceholderMessages = {
  set: "Select a mark to set",
  goto: "Select a mark to go to",
  delete: "Select a mark to delete"
};
var defaultSettings = {
  hideMarkListDuringInput: false,
  modalListUp: "",
  modalListDown: "",
  modalListSelect: "",
  modalListDelete: "",
  modalListCancel: "",
  openMarkInNewTab: false,
  // If true, open mark in new tab, else in current tab
  registerList: "abcdefghijklmnopqrstuvwxyz",
  registerSortByList: true,
  harpoonRegisterList: "qwer",
  harpoonRegisterSortByList: true,
  harpoonRegisterGapRemoval: true,
  experimentalGoto: false
};
var modalInstructionElClass = "modal-instruction-el";
var modalMarkSymbolClass = "mark-symbol";
var modalMarkFilepathClass = "mark-file-path";
var JSONschemaVersion = 1;

// src/utils/marks.ts
function findFirstUnusedRegister(marks, registers) {
  for (const reg of registers) {
    if (!marks.map((m) => m.symbol).includes(reg)) {
      return reg;
    }
  }
  return null;
}
function getMarkBySymbol(marks, symbol) {
  return marks.find((m) => m.symbol === symbol);
}
function sortMarksAlphabetically(marks) {
  marks.sort((a, b) => a.symbol.localeCompare(b.symbol));
}
function getSortedAndFilteredMarks(marks, isHarpoonMode, settings) {
  const availableRegisters = new Set((!isHarpoonMode ? settings.registerList : settings.harpoonRegisterList).split(""));
  const filteredMarks = marks.filter((el) => availableRegisters.has(el.symbol));
  if (!isHarpoonMode && settings.registerSortByList) {
    const registerList = settings.registerList;
    sortMarksBySettingsRegisterOrder(filteredMarks, registerList);
  } else if (isHarpoonMode && settings.harpoonRegisterSortByList) {
    const registerList = settings.harpoonRegisterList;
    sortMarksBySettingsRegisterOrder(filteredMarks, registerList);
  } else {
    sortMarksAlphabetically(filteredMarks);
  }
  return filteredMarks;
}
function sortMarksBySettingsRegisterOrder(marks, registers) {
  const registerOrder = new Map([...registers].map((symbol, index) => [symbol, index]));
  marks.sort((a, b) => {
    var _a, _b;
    return ((_a = registerOrder.get(a.symbol)) != null ? _a : Infinity) - ((_b = registerOrder.get(b.symbol)) != null ? _b : Infinity);
  });
}
function removeGapsForHarpoonMarks(marksToCopy, harpoonRegisters) {
  let marks = [...marksToCopy];
  let leftCur = 0;
  let rightCur = 0;
  while (rightCur < harpoonRegisters.length) {
    const markEl = marks.find((el) => el.symbol === harpoonRegisters[rightCur]);
    if (markEl !== void 0) {
      const symbolToSetTo = harpoonRegisters[leftCur];
      let filteredMarks = marks.filter((el) => el.symbol !== harpoonRegisters[leftCur]);
      filteredMarks.push({ symbol: symbolToSetTo, filePath: markEl.filePath });
      marks = filteredMarks;
      leftCur += 1;
    }
    rightCur += 1;
  }
  while (leftCur < harpoonRegisters.length) {
    marks = marks.filter((el) => el.symbol !== harpoonRegisters[leftCur]);
    leftCur += 1;
  }
  return marks;
}
function setNewOrOverwriteMark(marks, setMark, filePath) {
  const outMarks = marks.filter((m) => m.symbol !== setMark.symbol);
  outMarks.push({ symbol: setMark.symbol, filePath });
  return outMarks;
}

// src/utils/keybinds.ts
function prepareKeybinds(isMacOS, settings) {
  let keybinds = !isMacOS ? { ...modalDefaultKeybinds } : { ...modalDefaultKeybindsMac };
  if (settings.markListUp) {
    keybinds.up = [settings.markListUp];
  }
  if (settings.markListDown) {
    keybinds.down = [settings.markListDown];
  }
  if (settings.markListDelete) {
    keybinds.delete = [settings.markListDelete];
  }
  if (settings.markListSelect) {
    keybinds.select = [settings.markListSelect];
  }
  if (settings.markListCancel) {
    keybinds.cancel = [settings.markListCancel];
  }
  return keybinds;
}
function matchKeybind(evt, keybind) {
  const parts = keybind.split("+").map((p) => p.trim());
  let required = { ctrl: false, shift: false, alt: false, meta: false, key: "" };
  for (const part of parts) {
    if (part === "ctrl")
      required.ctrl = true;
    else if (part === "shift")
      required.shift = true;
    else if (part === "alt")
      required.alt = true;
    else if (part === "meta" || part === "cmd" || part === "win")
      required.meta = true;
    else
      required.key = part;
  }
  if (evt.ctrlKey !== required.ctrl)
    return false;
  if (evt.shiftKey !== required.shift)
    return false;
  if (evt.altKey !== required.alt)
    return false;
  if (evt.metaKey !== required.meta)
    return false;
  return evt.key === required.key;
}

// src/utils/obsidianUtils.ts
var import_obsidian = require("obsidian");
function openNewFile(filePath, openFileInNewTab, app) {
  const file = app.vault.getAbstractFileByPath(filePath);
  if (file instanceof import_obsidian.TFile) {
    if (openFileInNewTab) {
      app.workspace.getLeaf("tab").openFile(file);
    } else {
      app.workspace.getLeaf().openFile(file);
    }
  } else {
    new import_obsidian.Notice(`File not found for path ${filePath}. The file may have been deleted, moved or renamed.`);
  }
}
function getAllOpenedFilesExperimental(app) {
  var _a;
  let tabGroups = (_a = app.workspace.getLayout().main) == null ? void 0 : _a.children;
  let out = [];
  for (const el of tabGroups) {
    out.push(...el.children);
  }
  return out;
}
function navigateToOpenFileByPath(filePath, experimentalGoto, app) {
  if (experimentalGoto) {
    const openedFiles = getAllOpenedFilesExperimental(app);
    for (const openedFile of openedFiles) {
      if (openedFile.type == "leaf" && openedFile.state.state.file === filePath) {
        const leaf = app.workspace.getLeafById(openedFile.id);
        if (leaf && leaf.parent === app.workspace.getLeaf().parent) {
          app.workspace.setActiveLeaf(leaf, { focus: true });
          return true;
        }
      }
    }
  } else {
    const leaves = app.workspace.getLeavesOfType("markdown");
    for (const leaf of leaves) {
      const view = leaf.view;
      if (view instanceof import_obsidian.MarkdownView && view.file && view.file.path === filePath && leaf.parent === app.workspace.getLeaf().parent) {
        app.workspace.setActiveLeaf(leaf, { focus: true });
        return true;
      }
    }
  }
  return false;
}

// src/ui/MarkListModal.ts
var MarkListModal = class extends import_obsidian2.SuggestModal {
  constructor(app, plugin, mode, isHarpoonMode = false) {
    super(app);
    this.plugin = plugin;
    this.mode = mode;
    this.setPlaceholder(modalPlaceholderMessages[this.mode]);
    this.isHarpoonMode = isHarpoonMode;
  }
  getSuggestions(query) {
    return getSortedAndFilteredMarks(this.plugin.marks, this.isHarpoonMode, this.plugin.settings);
  }
  renderSuggestion(mark, el) {
    el.createEl("span", { text: mark.symbol, cls: modalMarkSymbolClass });
    el.createEl("span", { text: mark.filePath, cls: modalMarkFilepathClass });
    el.addEventListener("click", async (evt) => {
      await this.onChooseSuggestion(mark, evt);
      this.close();
    });
  }
  // Override to hide the input box
  onOpen() {
    super.onOpen();
    if (this.inputEl) {
      this.inputEl.style.display = "none";
    }
    this.modalEl.addClass("marks-modal");
    const modalKeybinds = prepareKeybinds(import_obsidian2.Platform.isMacOS, this.plugin.settings);
    const modalInstructions = this.prepareModalInstructionElement(modalKeybinds);
    this.modalEl.appendChild(modalInstructions);
    this._keyHandler = this.getModalKeyHandler(modalKeybinds);
    window.addEventListener("keydown", this._keyHandler, true);
  }
  onClose() {
    const instructions = this.modalEl.querySelector("." + modalInstructionElClass);
    if (instructions)
      instructions.remove();
    if (this._keyHandler) {
      window.removeEventListener("keydown", this._keyHandler, true);
      this._keyHandler = void 0;
    }
    super.onClose();
  }
  prepareModalInstructionElement(keybinds) {
    const instructions = document.createElement("div");
    instructions.addClass(modalInstructionElClass);
    const formatKeys = (keys) => keys.map(
      (k) => `<kbd>${k.replace("cmd", "\u2318").replace("ctrl", "Ctrl").replace("alt", "Alt").replace("shift", "Shift")}</kbd>`
    ).join("/");
    instructions.innerHTML = `
            <span>${formatKeys(keybinds.up)} : Up</span>
            <span>${formatKeys(keybinds.down)} : Down</span>
            <span>${formatKeys(keybinds.delete)} : Delete</span>
            <span><kbd>Symbol</kbd> : Jump/Set/Delete</span>
            <span>${formatKeys(keybinds.select)} : Confirm</span>
            <span>${formatKeys(keybinds.cancel)} : Close</span>

        `;
    return instructions;
  }
  getModalKeyHandler(keybinds) {
    return async (evt) => {
      const availableRegisters = new Set((!this.isHarpoonMode ? this.plugin.settings.registerList : this.plugin.settings.harpoonRegisterList).split(""));
      const chooser = this.chooser;
      if (keybinds.up.some((kb) => matchKeybind(evt, kb))) {
        evt.preventDefault();
        this.moveSelection(-1);
      } else if (keybinds.down.some((kb) => matchKeybind(evt, kb))) {
        evt.preventDefault();
        this.moveSelection(1);
      } else if (keybinds.delete.some((kb) => matchKeybind(evt, kb))) {
        evt.preventDefault();
        const prevIdx = chooser.selectedItem;
        const selected = chooser.values[prevIdx];
        if (selected) {
          await this.deleteMark(selected);
          chooser.values = getSortedAndFilteredMarks(this.plugin.marks, this.isHarpoonMode, this.plugin.settings);
          chooser.setSuggestions(chooser.values);
          let newIdx = prevIdx;
          if (newIdx >= chooser.values.length) {
            newIdx = chooser.values.length - 1;
          }
          chooser.setSelectedItem(Math.max(0, newIdx), false);
        }
      } else if (keybinds.select.some((kb) => matchKeybind(evt, kb))) {
        evt.preventDefault();
        const ind = chooser.selectedItem;
        const selected = chooser.values[ind];
        if (selected) {
          this.onChooseSuggestion(selected, evt);
          this.close();
        }
      } else if (keybinds.cancel.some((kb) => matchKeybind(evt, kb))) {
        evt.preventDefault();
        this.close();
      } else if (availableRegisters.has(evt.key)) {
        let mark = getMarkBySymbol(this.plugin.marks, evt.key);
        if (this.mode === "set") {
          if (mark == null) {
            const file = this.app.workspace.getActiveFile();
            if (!file) {
              new import_obsidian2.Notice("No active file to mark.");
              return;
            }
            mark = { symbol: evt.key, filePath: file.path };
          }
          evt.preventDefault();
          await this.onChooseSuggestion(mark, evt);
          this.close();
        } else if (this.mode === "goto" && mark) {
          evt.preventDefault();
          await this.onChooseSuggestion(mark, evt);
          this.close();
        } else if (this.mode === "delete" && mark) {
          evt.preventDefault();
          await this.onChooseSuggestion(mark, evt);
          this.close();
        }
      }
    };
  }
  async onChooseSuggestion(mark, evt) {
    if (this.mode === "set") {
      this.setNewOrOverwriteMark(mark);
    } else if (this.mode === "goto") {
      this.goToMark(mark);
    } else if (this.mode === "delete") {
      this.deleteMark(mark);
    }
  }
  moveSelection(delta) {
    const chooser = this.chooser;
    if (!chooser)
      return;
    let idx = chooser.selectedItem;
    if (typeof idx !== "number")
      idx = 0;
    const max = chooser.values.length;
    let next = idx + delta;
    if (next < 0)
      next = max - 1;
    if (next >= max)
      next = 0;
    chooser.setSelectedItem(next, 0);
  }
  async setNewOrOverwriteMark(mark) {
    const file = this.app.workspace.getActiveFile();
    if (!file) {
      new import_obsidian2.Notice("No active file to mark.");
      return;
    }
    const marks = setNewOrOverwriteMark(this.plugin.marks, mark, file.path);
    await this.plugin.saveMarks(marks);
    new import_obsidian2.Notice(`Set mark '${mark.symbol}' to ${file.name}`);
  }
  goToMark(mark) {
    const success = navigateToOpenFileByPath(mark.filePath, this.plugin.settings.experimentalGoto, this.app);
    if (!success) {
      openNewFile(mark.filePath, this.plugin.settings.openMarkInNewTab, this.app);
    }
  }
  async deleteMark(mark) {
    const cMark = { ...mark };
    const filteredMarks = this.plugin.marks.filter((m) => m.symbol !== cMark.symbol);
    await this.plugin.saveMarks(filteredMarks);
    if (this.plugin.settings.harpoonRegisterGapRemoval) {
      this.removeGapsForHarpoonMarks();
    }
    new import_obsidian2.Notice(`Deleted mark '${cMark.symbol}'`);
  }
  addFileToHarpoon() {
    var _a;
    const harpoonRegisters = this.plugin.settings.harpoonRegisterList.split("");
    const reg = findFirstUnusedRegister(this.plugin.marks, harpoonRegisters);
    if (!reg) {
      new import_obsidian2.Notice("Harpoon registers are full, cannot add more marks.");
    } else {
      this.setNewOrOverwriteMark({ symbol: reg, filePath: ((_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) || "" });
    }
  }
  async removeGapsForHarpoonMarks() {
    const harpoonRegisters = this.plugin.settings.harpoonRegisterList.split("");
    const marks = removeGapsForHarpoonMarks(this.plugin.marks, harpoonRegisters);
    await this.plugin.saveMarks(marks);
  }
};

// src/commands.ts
async function setGlobalMark(plugin) {
  new MarkListModal(plugin.app, plugin, "set").open();
}
async function goToGlobalMark(plugin) {
  new MarkListModal(plugin.app, plugin, "goto").open();
}
async function deleteGlobalMark(plugin) {
  new MarkListModal(plugin.app, plugin, "delete").open();
}
async function addFileToHarpoon(plugin) {
  new MarkListModal(plugin.app, plugin, "goto").addFileToHarpoon();
}
async function goToHarpoonMark(plugin) {
  new MarkListModal(plugin.app, plugin, "goto", true).open();
}

// src/ui/SettingsTab.ts
var import_obsidian3 = require("obsidian");
var SettingsTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const ds = defaultSettings;
    containerEl.createEl("h4", { text: "General" });
    this.createRegisterListSetting(containerEl, "Register list", ds.registerList, "Key symbols to be used as registers. Only include symbols that you can input with a single keystroke.", "registerList").addExtraButton((btn) => {
      btn.setIcon("refresh-ccw").setTooltip("Reset to default register list").onClick(
        async () => {
          this.plugin.settings.registerList = ds.registerList;
          await this.plugin.saveSettings();
          this.display();
        }
      );
    });
    new import_obsidian3.Setting(containerEl).setName("Sort all marks by register list").setDesc("Sort marks by the order of the key symbols in the register list. If disabled, marks will be sorted alphabetically according to the current locale.").addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue((_a = this.plugin.settings.registerSortByList) != null ? _a : ds.registerSortByList).onChange(async (value) => {
          this.plugin.settings.registerSortByList = value;
          await this.plugin.saveSettings();
        });
      }
    );
    new import_obsidian3.Setting(containerEl).setName("Open mark in new tab").setDesc('Open a file in the new tab when using "go to" command. If disabled, it will open the file in the current tab.').addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue((_a = this.plugin.settings.openMarkInNewTab) != null ? _a : ds.openMarkInNewTab).onChange(async (value) => {
          this.plugin.settings.openMarkInNewTab = value;
          await this.plugin.saveSettings();
        });
      }
    );
    new import_obsidian3.Setting(containerEl).setName("No duplication of opened files when using goto (experimental)").setDesc("Prevents duplicate tabs when switching to already opened files using the mark list after restarting Obsidian. (Experimental: may not work in future Obsidian versions.)").addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue((_a = this.plugin.settings.experimentalGoto) != null ? _a : ds.experimentalGoto).onChange(async (value) => {
          this.plugin.settings.experimentalGoto = value;
          await this.plugin.saveSettings();
        });
      }
    );
    containerEl.createEl("h4", { text: "Harpoon registers" });
    this.createRegisterListSetting(containerEl, "Harpoon register list", ds.harpoonRegisterList, "Key symbols to be used as Harpoon registers. Only include symbols that you can input with a single keystroke.", "harpoonRegisterList").addExtraButton((btn) => {
      btn.setIcon("refresh-ccw").setTooltip("Reset to default Harpoon register list").onClick(
        async () => {
          this.plugin.settings.harpoonRegisterList = ds.harpoonRegisterList;
          await this.plugin.saveSettings();
          this.display();
        }
      );
    });
    new import_obsidian3.Setting(containerEl).setName("Sort Harpoon marks by Harpoon register list").setDesc("Sort Harpoon marks by the order of the key symbols in the Harpoon register list. If disabled, marks will be sorted alphabetically according to the current locale.").addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue((_a = this.plugin.settings.harpoonRegisterSortByList) != null ? _a : ds.harpoonRegisterSortByList).onChange(async (value) => {
          this.plugin.settings.harpoonRegisterSortByList = value;
          await this.plugin.saveSettings();
        });
      }
    );
    new import_obsidian3.Setting(containerEl).setName("Remove gaps inbetween Harpoon marks").setDesc("Harpoon marks will be shifted to the left for every gap (register with no mark) based on the order of the Harpoon register list.").addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue((_a = this.plugin.settings.harpoonRegisterGapRemoval) != null ? _a : ds.harpoonRegisterGapRemoval).onChange(async (value) => {
          this.plugin.settings.harpoonRegisterGapRemoval = value;
          await this.plugin.saveSettings();
        });
      }
    );
    containerEl.createEl("h4", { text: "List navigation shortcuts" });
    this.createShortcutSetting(containerEl, "Up", ds.modalListUp, "Shortcut for moving up in the list", "markListUp");
    this.createShortcutSetting(containerEl, "Down", ds.modalListDown, "Shortcut for moving down in the list", "markListDown");
    this.createShortcutSetting(containerEl, "Select", ds.modalListSelect, "Shortcut for selecting a mark", "markListSelect");
    this.createShortcutSetting(containerEl, "Cancel", ds.modalListCancel, "Shortcut for cancelling the modal", "markListCancel");
    this.createShortcutSetting(containerEl, "Delete", ds.modalListDelete, "Shortcut for deleting a mark", "markListDelete");
  }
  // use only for string values from Settings type
  createShortcutSetting(containerEl, name, defaultValue, desc, key) {
    new import_obsidian3.Setting(containerEl).setName(name).setDesc(desc).addText((text) => {
      var _a;
      return text.setValue(String((_a = this.plugin.settings[key]) != null ? _a : defaultValue)).onChange(async (value) => {
        this.plugin.settings[key] = value;
        await this.plugin.saveSettings();
      });
    });
  }
  createRegisterListSetting(containerEl, name, defaultValue, desc, key) {
    return new import_obsidian3.Setting(containerEl).setName(name).setDesc(desc).addText((text) => {
      var _a;
      return text.setValue(String((_a = this.plugin.settings[key]) != null ? _a : defaultValue)).onChange(async (value) => {
        this.plugin.settings[key] = value;
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/utils/storage.ts
async function loadSettings(plugin) {
  var _a;
  return ((_a = await plugin.loadData()) == null ? void 0 : _a.settings) || defaultSettings;
}
async function saveSettings(plugin, settings) {
  const data = await plugin.loadData() || {};
  data.settings = settings;
  await plugin.saveData(data);
}
async function loadMarks(plugin) {
  var _a;
  return ((_a = await plugin.loadData()) == null ? void 0 : _a.marks) || [];
}
async function saveMarks(plugin, marks) {
  const data = await plugin.loadData() || {};
  data.marks = marks;
  await plugin.saveData(data);
}
async function JSONschemaCheck(plugin) {
  const data = await plugin.loadData() || { schemaVersion: JSONschemaVersion };
  if (data.schemaVersion && data.schemaVersion === JSONschemaVersion) {
    return;
  }
  console.log("tether-marks: The data loaded is not in correct format. The plugin may not work correctly. This will usually happen after plugin update that changes JSON schema. ");
}

// src/main.ts
var VimMarksImpl = class extends import_obsidian4.Plugin {
  constructor() {
    super(...arguments);
    this.marks = [];
  }
  async onload() {
    await JSONschemaCheck(this);
    this.settings = await loadSettings(this);
    this.marks = await loadMarks(this);
    this.addCommand({
      id: "set-global-mark",
      name: "Set mark",
      callback: () => setGlobalMark(this)
    });
    this.addCommand({
      id: "go-to-global-mark",
      name: "Go to mark",
      callback: () => goToGlobalMark(this)
    });
    this.addCommand({
      id: "delete-global-mark",
      name: "Delete mark",
      callback: () => deleteGlobalMark(this)
    });
    this.addCommand({
      id: "add-file-to-harpoon",
      name: "Add file to Harpoon",
      callback: () => addFileToHarpoon(this)
    });
    this.addCommand({
      id: "go-to-harpoon-mark",
      name: "Go to Harpoon mark",
      callback: () => goToHarpoonMark(this)
    });
    this.addSettingTab(new SettingsTab(this.app, this));
    console.log("loading tether-marks");
  }
  async saveSettings() {
    await saveSettings(this, this.settings);
  }
  async saveMarks(marks) {
    this.marks = marks;
    await saveMarks(this, marks);
  }
  onunload() {
    console.log("unloading tether-marks");
  }
};
//# sourceMappingURL=data:application/json;base64,
