/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => VimMarksImpl
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/ui/MarkListModal.ts
var import_obsidian = require("obsidian");
var MarkListModal = class extends import_obsidian.SuggestModal {
  constructor(app, plugin, mode) {
    super(app);
    this.plugin = plugin;
    this.mode = mode;
    this.marks = plugin.marks;
    this.setPlaceholder(this.mode === "set" ? "Select a mark to set" : "Select a mark to go to");
  }
  getSuggestions(query) {
    return this.marks;
  }
  renderSuggestion(mark, el) {
    el.createEl("div", { text: `${mark.letter}: ${mark.filePath}` });
  }
  async onChooseSuggestion(mark, evt) {
    if (this.mode === "set") {
      const file = this.app.workspace.getActiveFile();
      if (!file) {
        new import_obsidian.Notice("No active file to mark.");
        return;
      }
      const marks = this.plugin.marks.filter((m) => m.letter !== mark.letter);
      marks.push({ letter: mark.letter, filePath: file.path });
      await this.plugin.saveMarks(marks);
      new import_obsidian.Notice(`Set mark '${mark.letter}' to ${file.name}`);
    } else if (this.mode === "goto") {
      const file = this.app.vault.getAbstractFileByPath(mark.filePath);
      if (file instanceof import_obsidian.TFile) {
        this.app.workspace.getLeaf().openFile(file);
      } else {
        new import_obsidian.Notice(`File not found for mark '${mark.letter}'`);
      }
    }
  }
  // Override to hide the input box
  onOpen() {
    super.onOpen();
    if (this.inputEl) {
      this.inputEl.style.display = "none";
    }
    const upKey = this.plugin.settings.markListUp || "ctrl+p";
    const downKey = this.plugin.settings.markListDown || "ctrl+n";
    this._keyHandler = (evt) => {
      if (this.matchKeybind(evt, upKey)) {
        evt.preventDefault();
        this.moveSelection(-1);
      } else if (this.matchKeybind(evt, downKey)) {
        evt.preventDefault();
        this.moveSelection(1);
      }
    };
    window.addEventListener("keydown", this._keyHandler, true);
  }
  onClose() {
    if (this._keyHandler) {
      window.removeEventListener("keydown", this._keyHandler, true);
      this._keyHandler = void 0;
    }
    super.onClose();
  }
  moveSelection(delta) {
    const chooser = this.chooser;
    if (!chooser)
      return;
    let idx = chooser.selectedItem;
    if (typeof idx !== "number")
      idx = 0;
    const max = chooser.values.length;
    let next = idx + delta;
    if (next < 0)
      next = max - 1;
    if (next >= max)
      next = 0;
    chooser.setSelectedItem(next, true);
  }
  matchKeybind(evt, keybind) {
    const parts = keybind.split("+").map((p) => p.trim().toLowerCase());
    let required = { ctrl: false, shift: false, alt: false, meta: false, key: "" };
    for (const part of parts) {
      if (part === "ctrl")
        required.ctrl = true;
      else if (part === "shift")
        required.shift = true;
      else if (part === "alt")
        required.alt = true;
      else if (part === "meta" || part === "cmd" || part === "win")
        required.meta = true;
      else
        required.key = part;
    }
    if (evt.ctrlKey !== required.ctrl)
      return false;
    if (evt.shiftKey !== required.shift)
      return false;
    if (evt.altKey !== required.alt)
      return false;
    if (evt.metaKey !== required.meta)
      return false;
    return evt.key.toLowerCase() === required.key;
  }
};

// src/commands.ts
async function setGlobalMark(plugin) {
  new MarkListModal(plugin.app, plugin, "set").open();
}
async function goToGlobalMark(plugin) {
  new MarkListModal(plugin.app, plugin, "goto").open();
}

// src/ui/SettingsTab.ts
var import_obsidian2 = require("obsidian");
var SettingsTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian2.Setting(containerEl).setName("Hide mark list").setDesc("Hide the global mark list for both commands (for fast input, no flicker).").addToggle((toggle) => toggle.setValue(this.plugin.settings.hideMarkListDuringInput).onChange(async (value) => {
      this.plugin.settings.hideMarkListDuringInput = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h4", { text: "Mark List Navigation Shortcuts" });
    this.createShortcutSetting(containerEl, "Up", "ctrl+P", "Shortcut for moving up in the mark list", "markListUp");
    this.createShortcutSetting(containerEl, "Down", "ctrl+N", "Shortcut for moving down in the mark list", "markListDown");
    this.createShortcutSetting(containerEl, "Select", "Enter", "Shortcut for selecting a mark", "markListSelect");
  }
  createShortcutSetting(containerEl, name, defaultValue, desc, key) {
    new import_obsidian2.Setting(containerEl).setName(name).setDesc(desc).addText((text) => text.setValue(this.plugin.settings[key] || defaultValue).onChange(async (value) => {
      this.plugin.settings[key] = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/utils/storage.ts
async function loadSettings(plugin) {
  var _a;
  return ((_a = await plugin.loadData()) == null ? void 0 : _a.settings) || { hideMarkListDuringInput: false };
}
async function saveSettings(plugin, settings) {
  const data = await plugin.loadData() || {};
  data.settings = settings;
  await plugin.saveData(data);
}
async function loadMarks(plugin) {
  var _a;
  return ((_a = await plugin.loadData()) == null ? void 0 : _a.marks) || [];
}
async function saveMarks(plugin, marks) {
  const data = await plugin.loadData() || {};
  data.marks = marks;
  await plugin.saveData(data);
}

// src/main.ts
var VimMarksImpl = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.marks = [];
  }
  async onload() {
    this.settings = await loadSettings(this);
    this.marks = await loadMarks(this);
    this.addCommand({
      id: "set-global-mark",
      name: "Set Global Mark",
      callback: () => setGlobalMark(this)
    });
    this.addCommand({
      id: "go-to-global-mark",
      name: "Go to Global Mark",
      callback: () => goToGlobalMark(this)
    });
    this.addSettingTab(new SettingsTab(this.app, this));
    this.addRibbonIcon("bookmark", "Show Global Marks", async () => {
      const modal = new MarkListModal(this.app, this, "show");
      modal.open();
    });
    console.log("VimMarksImpl plugin loaded");
  }
  async saveSettings() {
    await saveSettings(this, this.settings);
  }
  async saveMarks(marks) {
    this.marks = marks;
    await saveMarks(this, marks);
  }
  onunload() {
    console.log("VimMarksImpl plugin unloaded");
  }
};
//# sourceMappingURL=data:application/json;base64,
