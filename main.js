/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TetherMarksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/pluginOperations.ts
var import_obsidian2 = require("obsidian");

// node_modules/tether-marks-core/dist/marks.js
function findFirstUnusedRegister(marks, registers) {
  for (const reg of registers) {
    if (!marks.map((m) => m.symbol).includes(reg)) {
      return reg;
    }
  }
  return null;
}
function getMarkBySymbol(marks, symbol) {
  return marks.find((m) => m.symbol === symbol);
}
function sortMarksAlphabetically(marks) {
  marks.sort((a, b) => a.symbol.localeCompare(b.symbol));
}
function getSortedAndFilteredMarks(marks, isHarpoonMode, settings) {
  const availableRegisters = new Set((!isHarpoonMode ? settings.registerList : settings.harpoonRegisterList).split(""));
  const filteredMarks = marks.filter((el) => availableRegisters.has(el.symbol));
  if (!isHarpoonMode && settings.registerSortByList) {
    const registerList = settings.registerList;
    sortMarksBySettingsRegisterOrder(filteredMarks, registerList);
  } else if (isHarpoonMode && settings.harpoonRegisterSortByList) {
    const registerList = settings.harpoonRegisterList;
    sortMarksBySettingsRegisterOrder(filteredMarks, registerList);
  } else {
    sortMarksAlphabetically(filteredMarks);
  }
  return filteredMarks;
}
function sortMarksBySettingsRegisterOrder(marks, registers) {
  const registerOrder = new Map([...registers].map((symbol, index) => [symbol, index]));
  marks.sort((a, b) => {
    var _a, _b;
    return ((_a = registerOrder.get(a.symbol)) !== null && _a !== void 0 ? _a : Infinity) - ((_b = registerOrder.get(b.symbol)) !== null && _b !== void 0 ? _b : Infinity);
  });
}
function removeGapsForHarpoonMarks(marksToCopy, harpoonRegisters) {
  let marks = [...marksToCopy];
  let leftCur = 0;
  let rightCur = 0;
  while (rightCur < harpoonRegisters.length) {
    const markEl = marks.find((el) => el.symbol === harpoonRegisters[rightCur]);
    if (markEl !== void 0) {
      const symbolToSetTo = harpoonRegisters[leftCur];
      let filteredMarks = marks.filter((el) => el.symbol !== harpoonRegisters[leftCur]);
      filteredMarks.push({ symbol: symbolToSetTo, filePath: markEl.filePath });
      marks = filteredMarks;
      leftCur += 1;
    }
    rightCur += 1;
  }
  while (leftCur < harpoonRegisters.length) {
    marks = marks.filter((el) => el.symbol !== harpoonRegisters[leftCur]);
    leftCur += 1;
  }
  return marks;
}
function restoreLastChangedMark(marks, lastChangedMark) {
  const markToRestore = { ...lastChangedMark };
  const markToDiscard = marks.find((m) => m.symbol === markToRestore.symbol);
  const marksWithoutDiscarded = marks.filter((m) => m.symbol !== markToRestore.symbol);
  marksWithoutDiscarded.push({ symbol: markToRestore.symbol, filePath: markToRestore.filePath });
  return { marks: marksWithoutDiscarded, markToDiscard };
}
function setNewOrOverwriteMark(marks, setMark, filePath) {
  const { marks: filteredMarks, deletedMark: overwrittenMark } = deleteMark(marks, setMark);
  filteredMarks.push({ symbol: setMark.symbol, filePath });
  return { marks: filteredMarks, overwrittenMark };
}
function deleteMark(marks, markToDelete) {
  const cMark = { ...markToDelete };
  const deletedMark = marks.find((m) => m.symbol === cMark.symbol);
  const filteredMarks = marks.filter((m) => m.symbol !== cMark.symbol);
  return { marks: filteredMarks, deletedMark };
}

// node_modules/tether-marks-core/dist/defaultValues.js
var defaultBasicMarksSettings = {
  registerList: "abcdefghijklmnopqrstuvwxyz",
  registerSortByList: true,
  harpoonRegisterList: "qwer",
  harpoonRegisterSortByList: true,
  harpoonRegisterGapRemoval: true
};
var modeDescription = {
  "set": "Set mark",
  "goto": "Go to mark",
  "delete": "Delete mark"
};

// src/utils/obsidianUtils.ts
var import_obsidian = require("obsidian");
function openNewFileByPath(filePath, openFileInNewTab, app) {
  const file = app.vault.getAbstractFileByPath(filePath);
  if (file instanceof import_obsidian.TFile) {
    if (openFileInNewTab) {
      app.workspace.getLeaf("tab").openFile(file);
    } else {
      app.workspace.getLeaf().openFile(file);
    }
  } else {
    new import_obsidian.Notice(`File not found for path ${filePath}. The file may have been deleted, moved or renamed.`);
  }
}
function getAllOpenedFilesExperimental(app) {
  var _a;
  const tabGroups = (_a = app.workspace.getLayout().main) == null ? void 0 : _a.children;
  const out = [];
  for (const el of tabGroups) {
    out.push(...el.children);
  }
  return out;
}
function getAllWorkspaceLeaves(app) {
  const list = [];
  app.workspace.iterateAllLeaves((leaf) => {
    list.push(leaf);
  });
  return list;
}
function navigateToOpenedFileByPath(filePath, experimentalGoto, app) {
  if (experimentalGoto) {
    const openedFiles = getAllOpenedFilesExperimental(app);
    for (const openedFile of openedFiles) {
      if (openedFile.type == "leaf" && openedFile.state.state.file === filePath) {
        const leaf = app.workspace.getLeafById(openedFile.id);
        if (leaf && leaf.parent === app.workspace.getLeaf().parent) {
          app.workspace.setActiveLeaf(leaf, { focus: true });
          return true;
        }
      }
    }
  } else {
    const leaves = getAllWorkspaceLeaves(app);
    for (const leaf of leaves) {
      const view = leaf.view;
      if (view.file && view.file.path === filePath && leaf.parent === app.workspace.getLeaf().parent) {
        app.workspace.setActiveLeaf(leaf, { focus: true });
        return true;
      }
    }
  }
  return false;
}

// src/pluginOperations.ts
async function pluginSetNewOrOverwriteMark(plugin, mark) {
  const file = plugin.app.workspace.getActiveFile();
  if (!file) {
    new import_obsidian2.Notice("No active file to mark.");
    return;
  }
  const { marks, overwrittenMark } = setNewOrOverwriteMark(plugin.marks, mark, file.path);
  await plugin.saveMarks(marks);
  if (overwrittenMark) {
    await plugin.saveLastChangedMark(overwrittenMark);
  }
  new import_obsidian2.Notice(`Set mark '${mark.symbol}' to ${file.name}`);
}
function pluginGoToMark(plugin, mark) {
  const success = navigateToOpenedFileByPath(mark.filePath, plugin.settings.experimentalGoto, plugin.app);
  if (!success) {
    openNewFileByPath(mark.filePath, plugin.settings.openMarkInNewTab, plugin.app);
  }
}
async function pluginDeleteMark(plugin, mark) {
  const { marks, deletedMark } = deleteMark(plugin.marks, mark);
  await plugin.saveMarks(marks);
  if (deletedMark) {
    await plugin.saveLastChangedMark(deletedMark);
  }
  if (plugin.settings.harpoonRegisterGapRemoval) {
    pluginRemoveGapsForHarpoonMarks(plugin);
  }
  new import_obsidian2.Notice(`Deleted mark '${deletedMark == null ? void 0 : deletedMark.symbol}'`);
}
async function pluginRestoreLastChangedMark(plugin) {
  if (plugin.lastChangedMark) {
    const out = restoreLastChangedMark(plugin.marks, plugin.lastChangedMark);
    await plugin.saveMarks(out.marks);
    new import_obsidian2.Notice(`Restored mark '${plugin.lastChangedMark.symbol}' to ${plugin.lastChangedMark.filePath}`);
    if (out.markToDiscard) {
      plugin.saveLastChangedMark(out.markToDiscard);
    }
  } else {
    new import_obsidian2.Notice("No last changed mark to restore.");
  }
}
function pluginAddFileToHarpoon(plugin) {
  const harpoonRegisters = plugin.settings.harpoonRegisterList.split("");
  const reg = findFirstUnusedRegister(plugin.marks, harpoonRegisters);
  if (reg) {
    const file = plugin.app.workspace.getActiveFile();
    if (!file) {
      new import_obsidian2.Notice("No active file to mark.");
      return;
    }
    pluginSetNewOrOverwriteMark(plugin, { symbol: reg, filePath: file.path });
  } else {
    new import_obsidian2.Notice("Harpoon registers are full, cannot add more marks.");
  }
}
async function pluginRemoveGapsForHarpoonMarks(plugin) {
  const harpoonRegisters = plugin.settings.harpoonRegisterList.split("");
  const marks = removeGapsForHarpoonMarks(plugin.marks, harpoonRegisters);
  await plugin.saveMarks(marks);
}

// src/ui/MarkListModal.ts
var import_obsidian3 = require("obsidian");

// src/utils/defaultValues.ts
var modalDefaultKeybinds = {
  up: ["ctrl+k", "ctrl+p"],
  down: ["ctrl+j", "ctrl+n"],
  delete: ["ctrl+d"],
  select: ["Enter"],
  cancel: ["Escape"],
  undo: ["ctrl+u"]
};
var modalDefaultKeybindsMac = {
  up: ["cmd+k", "cmd+p"],
  down: ["cmd+j", "cmd+n"],
  delete: ["cmd+d"],
  select: ["Enter"],
  cancel: ["Escape"],
  undo: ["cmd+u"]
};
var modalMarkSymbolClass = "mark-symbol";
var modalMarkFilepathClass = "mark-file-path";
var modalMarkHarpoonSign = "harpoon-sign";
var JSONschemaVersion = 1;
var defaultObsidianMarksSettings = {
  ...defaultBasicMarksSettings,
  // hideMarkListDuringInput: false,
  openMarkInNewTab: false,
  // If true, open mark in new tab, else in current tab
  experimentalGoto: false,
  modalListUp: "",
  modalListDown: "",
  modalListSelect: "",
  modalListUndo: "",
  modalListDelete: "",
  modalListCancel: ""
};

// src/utils/keybinds.ts
function prepareKeybinds(isMacOS, settings) {
  let keybinds = !isMacOS ? { ...modalDefaultKeybinds } : { ...modalDefaultKeybindsMac };
  if (settings.modalListUp) {
    keybinds.up = [settings.modalListUp];
  }
  if (settings.modalListDown) {
    keybinds.down = [settings.modalListDown];
  }
  if (settings.modalListDelete) {
    keybinds.delete = [settings.modalListDelete];
  }
  if (settings.modalListSelect) {
    keybinds.select = [settings.modalListSelect];
  }
  if (settings.modalListUndo) {
    keybinds.undo = [settings.modalListUndo];
  }
  if (settings.modalListCancel) {
    keybinds.cancel = [settings.modalListCancel];
  }
  return keybinds;
}
function matchKeybind(evt, keybind) {
  const parts = keybind.split("+").map((p) => p.trim());
  let required = { ctrl: false, shift: false, alt: false, meta: false, key: "" };
  for (const part of parts) {
    if (part === "ctrl")
      required.ctrl = true;
    else if (part === "shift")
      required.shift = true;
    else if (part === "alt")
      required.alt = true;
    else if (part === "meta" || part === "cmd" || part === "win")
      required.meta = true;
    else
      required.key = part;
  }
  if (evt.ctrlKey !== required.ctrl)
    return false;
  if (evt.shiftKey !== required.shift)
    return false;
  if (evt.altKey !== required.alt)
    return false;
  if (evt.metaKey !== required.meta)
    return false;
  return evt.key === required.key;
}

// src/ui/MarkListModal.ts
var MarkListModal = class extends import_obsidian3.SuggestModal {
  constructor(app, plugin, mode, isHarpoonMode = false) {
    super(app);
    this.plugin = plugin;
    this.mode = mode;
    this.isHarpoonMode = isHarpoonMode;
  }
  getInstructions(modalKeybinds) {
    return [
      { command: modalKeybinds.up.join("/"), purpose: "Up" },
      { command: modalKeybinds.down.join("/"), purpose: "Down" },
      { command: "[Symbol]", purpose: modeDescription[this.mode] },
      { command: modalKeybinds.select.join("/"), purpose: modeDescription[this.mode] },
      { command: modalKeybinds.delete.join("/"), purpose: "Delete" },
      { command: modalKeybinds.cancel.join("/"), purpose: "Cancel" },
      { command: modalKeybinds.undo.join("/"), purpose: "Undo" }
    ];
  }
  getSuggestions(query) {
    return getSortedAndFilteredMarks(this.plugin.marks, this.isHarpoonMode, this.plugin.settings);
  }
  renderSuggestion(mark, el) {
    var _a;
    const symbolEl = el.createEl("span", { text: mark.symbol, cls: modalMarkSymbolClass });
    el.createEl("span", { text: mark.filePath, cls: modalMarkFilepathClass });
    if (this.plugin.settings.harpoonRegisterList.contains(mark.symbol)) {
      el.createEl("span", { text: "H", cls: modalMarkHarpoonSign });
    }
    if (((_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) === mark.filePath) {
      symbolEl.addClass("highlight");
    }
    el.addEventListener("click", async (evt) => {
      await this.onChooseSuggestion(mark, evt);
      this.close();
    });
  }
  onOpen() {
    super.onOpen();
    if (this.inputEl) {
      this.inputEl.style.display = "none";
    }
    this.modalEl.addClass("marks-modal");
    const modalKeybinds = prepareKeybinds(import_obsidian3.Platform.isMacOS, this.plugin.settings);
    this.setInstructions(this.getInstructions(modalKeybinds));
    this._keyHandler = this.getModalKeyHandler(modalKeybinds);
    window.addEventListener("keydown", this._keyHandler, true);
  }
  onClose() {
    if (this._keyHandler) {
      window.removeEventListener("keydown", this._keyHandler, true);
      this._keyHandler = void 0;
    }
    super.onClose();
  }
  getModalKeyHandler(keybinds) {
    return async (evt) => {
      const availableRegisters = new Set((!this.isHarpoonMode ? this.plugin.settings.registerList : this.plugin.settings.harpoonRegisterList).split(""));
      const chooser = this.chooser;
      if (keybinds.up.some((kb) => matchKeybind(evt, kb))) {
        evt.preventDefault();
        this.moveSelection(-1);
      } else if (keybinds.down.some((kb) => matchKeybind(evt, kb))) {
        evt.preventDefault();
        this.moveSelection(1);
      } else if (keybinds.delete.some((kb) => matchKeybind(evt, kb))) {
        evt.preventDefault();
        if (chooser.values) {
          const prevIdx = chooser.selectedItem;
          const selected = chooser.values[prevIdx];
          if (selected) {
            await pluginDeleteMark(this.plugin, selected);
            chooser.values = getSortedAndFilteredMarks(this.plugin.marks, this.isHarpoonMode, this.plugin.settings);
            chooser.setSuggestions(chooser.values);
            chooser.setSelectedItem(Math.max(0, Math.min(prevIdx, chooser.values.length)), false);
          }
        }
      } else if (keybinds.undo.some((kb) => matchKeybind(evt, kb))) {
        evt.preventDefault();
        await pluginRestoreLastChangedMark(this.plugin);
        chooser.values = getSortedAndFilteredMarks(this.plugin.marks, this.isHarpoonMode, this.plugin.settings);
        const prevIdx = chooser.selectedItem;
        chooser.setSuggestions(chooser.values);
        chooser.setSelectedItem(Math.max(0, prevIdx), false);
      } else if (keybinds.select.some((kb) => matchKeybind(evt, kb))) {
        evt.preventDefault();
        const ind = chooser.selectedItem;
        const selected = chooser.values[ind];
        if (selected) {
          this.onChooseSuggestion(selected, evt);
          this.close();
        }
      } else if (keybinds.cancel.some((kb) => matchKeybind(evt, kb))) {
        evt.preventDefault();
        this.close();
      } else if (availableRegisters.has(evt.key)) {
        let mark = getMarkBySymbol(this.plugin.marks, evt.key);
        if (this.mode === "set") {
          if (mark == null) {
            mark = { symbol: evt.key, filePath: "" };
          }
          evt.preventDefault();
          await this.onChooseSuggestion(mark, evt);
          this.close();
        } else if (this.mode === "goto" && mark) {
          evt.preventDefault();
          await this.onChooseSuggestion(mark, evt);
          this.close();
        } else if (this.mode === "delete" && mark) {
          evt.preventDefault();
          await this.onChooseSuggestion(mark, evt);
          this.close();
        }
      }
    };
  }
  async onChooseSuggestion(mark, evt) {
    if (this.mode === "set") {
      pluginSetNewOrOverwriteMark(this.plugin, mark);
    } else if (this.mode === "goto") {
      pluginGoToMark(this.plugin, mark);
    } else if (this.mode === "delete") {
      pluginDeleteMark(this.plugin, mark);
    }
  }
  moveSelection(delta) {
    const chooser = this.chooser;
    if (!chooser)
      return;
    let idx = chooser.selectedItem;
    if (typeof idx !== "number")
      idx = 0;
    if (!chooser.values)
      return;
    const max = chooser.values.length;
    let next = idx + delta;
    if (next < 0)
      next = max - 1;
    if (next >= max)
      next = 0;
    chooser.setSelectedItem(next, 0);
  }
};

// src/commands.ts
async function setGlobalMark(plugin) {
  new MarkListModal(plugin.app, plugin, "set").open();
}
async function goToGlobalMark(plugin) {
  new MarkListModal(plugin.app, plugin, "goto").open();
}
async function deleteGlobalMark(plugin) {
  new MarkListModal(plugin.app, plugin, "delete").open();
}
async function addFileToHarpoon(plugin) {
  pluginAddFileToHarpoon(plugin);
}
async function goToHarpoonMark(plugin) {
  new MarkListModal(plugin.app, plugin, "goto", true).open();
}

// src/ui/SettingsTab.ts
var import_obsidian4 = require("obsidian");
var SettingsTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const ds = defaultObsidianMarksSettings;
    new import_obsidian4.Setting(containerEl).setName("Open mark in new tab").setDesc('Open a file in the new tab when using "go to" command. If disabled, it will open the file in the current tab.').addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue((_a = this.plugin.settings.openMarkInNewTab) != null ? _a : ds.openMarkInNewTab).onChange(async (value) => {
          this.plugin.settings.openMarkInNewTab = value;
          await this.plugin.saveSettings();
        });
      }
    );
    new import_obsidian4.Setting(containerEl).setName("No duplication of opened files when using Go to commands (experimental)").setDesc("Prevents duplicate tabs when switching to already opened files using the mark list after restarting Obsidian. (Experimental: may not work in future Obsidian versions.)").addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue((_a = this.plugin.settings.experimentalGoto) != null ? _a : ds.experimentalGoto).onChange(async (value) => {
          this.plugin.settings.experimentalGoto = value;
          await this.plugin.saveSettings();
        });
      }
    );
    new import_obsidian4.Setting(containerEl).setName("General registers").setHeading();
    this.createRegisterListSetting(containerEl, "Register list", ds.registerList, "Key symbols to be used as registers. Only include symbols that you can input with a single keystroke.", "registerList").addExtraButton((btn) => {
      btn.setIcon("refresh-ccw").setTooltip("Reset to default register list").onClick(
        async () => {
          this.plugin.settings.registerList = ds.registerList;
          await this.plugin.saveSettings();
          this.display();
        }
      );
    });
    new import_obsidian4.Setting(containerEl).setName("Sort all marks by register list").setDesc("Sort marks by the order of the key symbols in the register list. If disabled, marks will be sorted alphabetically according to the current locale.").addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue((_a = this.plugin.settings.registerSortByList) != null ? _a : ds.registerSortByList).onChange(async (value) => {
          this.plugin.settings.registerSortByList = value;
          await this.plugin.saveSettings();
        });
      }
    );
    new import_obsidian4.Setting(containerEl).setName("Harpoon registers").setHeading();
    this.createRegisterListSetting(containerEl, "Harpoon register list", ds.harpoonRegisterList, "Key symbols to be used as Harpoon registers. Only include symbols that you can input with a single keystroke.", "harpoonRegisterList").addExtraButton((btn) => {
      btn.setIcon("refresh-ccw").setTooltip("Reset to default Harpoon register list").onClick(
        async () => {
          this.plugin.settings.harpoonRegisterList = ds.harpoonRegisterList;
          await this.plugin.saveSettings();
          this.display();
        }
      );
    });
    new import_obsidian4.Setting(containerEl).setName("Sort Harpoon marks by Harpoon register list").setDesc("Sort Harpoon marks by the order of the key symbols in the Harpoon register list. If disabled, marks will be sorted alphabetically according to the current locale.").addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue((_a = this.plugin.settings.harpoonRegisterSortByList) != null ? _a : ds.harpoonRegisterSortByList).onChange(async (value) => {
          this.plugin.settings.harpoonRegisterSortByList = value;
          await this.plugin.saveSettings();
        });
      }
    );
    new import_obsidian4.Setting(containerEl).setName("Remove gaps inbetween Harpoon marks").setDesc("Harpoon marks will be shifted to the left for every gap (register with no mark) based on the order of the Harpoon register list.").addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue((_a = this.plugin.settings.harpoonRegisterGapRemoval) != null ? _a : ds.harpoonRegisterGapRemoval).onChange(async (value) => {
          this.plugin.settings.harpoonRegisterGapRemoval = value;
          await this.plugin.saveSettings();
        });
      }
    );
    containerEl.createEl("h4", { text: "List navigation shortcuts" });
    this.createShortcutSetting(containerEl, "Up", ds.modalListUp, "Shortcut for moving up in the list", "modalListUp");
    this.createShortcutSetting(containerEl, "Down", ds.modalListDown, "Shortcut for moving down in the list", "modalListDown");
    this.createShortcutSetting(containerEl, "Select mark", ds.modalListSelect, "Shortcut for selecting a mark", "modalListSelect");
    this.createShortcutSetting(containerEl, "Cancel modal", ds.modalListCancel, "Shortcut for cancelling the modal", "modalListCancel");
    this.createShortcutSetting(containerEl, "Delete mark", ds.modalListDelete, "Shortcut for deleting a mark", "modalListDelete");
    this.createShortcutSetting(containerEl, "Restore last changed mark", ds.modalListUndo, "Shortcut for undoing last action of changing a mark", "modalListUndo");
  }
  // use only for string values from Settings type
  createShortcutSetting(containerEl, name, defaultValue, desc, key) {
    new import_obsidian4.Setting(containerEl).setName(name).setDesc(desc).addText((text) => {
      var _a;
      return text.setValue(String((_a = this.plugin.settings[key]) != null ? _a : defaultValue)).onChange(async (value) => {
        this.plugin.settings[key] = value;
        await this.plugin.saveSettings();
      });
    });
  }
  createRegisterListSetting(containerEl, name, defaultValue, desc, key) {
    return new import_obsidian4.Setting(containerEl).setName(name).setDesc(desc).addText((text) => {
      var _a;
      return text.setValue(String((_a = this.plugin.settings[key]) != null ? _a : defaultValue)).onChange(async (value) => {
        this.plugin.settings[key] = value;
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/utils/storage.ts
var import_obsidian5 = require("obsidian");
async function loadSettings(plugin) {
  var _a;
  return ((_a = await plugin.loadData()) == null ? void 0 : _a.settings) || defaultObsidianMarksSettings;
}
async function saveSettings(plugin, settings) {
  const data = await plugin.loadData() || {};
  data.settings = settings;
  await plugin.saveData(data);
}
async function loadMarks(plugin) {
  var _a;
  return ((_a = await plugin.loadData()) == null ? void 0 : _a.marks) || [];
}
async function saveMarks(plugin, marks) {
  const data = await plugin.loadData() || {};
  data.marks = marks;
  await plugin.saveData(data);
}
async function loadLastChangedMark(plugin) {
  var _a;
  return ((_a = await plugin.loadData()) == null ? void 0 : _a.lastChangedMark) || {};
}
async function saveLastChangedMark(plugin, lastChangedMark) {
  const data = await plugin.loadData() || {};
  data.lastChangedMark = lastChangedMark;
  await plugin.saveData(data);
}
async function JSONschemaCheck(plugin) {
  const data = await plugin.loadData();
  if (!data || !data.schemaVersion) {
    await plugin.saveData({ schemaVersion: JSONschemaVersion, ...data });
    return;
  }
  if (data.schemaVersion === JSONschemaVersion) {
    return;
  }
  new import_obsidian5.Notice(plugin.manifest.name + ": Faulty data. Check developer tools for more info.");
  console.error(plugin.manifest.id + ": The data loaded is not in correct format. The plugin may not work properly. This usually happens after plugin update that changes the JSON schema. ");
}

// src/main.ts
var TetherMarksPlugin = class extends import_obsidian6.Plugin {
  constructor() {
    super(...arguments);
    this.marks = [];
    this.lastChangedMark = null;
  }
  async onload() {
    await JSONschemaCheck(this);
    this.settings = await loadSettings(this);
    this.marks = await loadMarks(this);
    this.lastChangedMark = await loadLastChangedMark(this);
    this.addCommand({
      id: "set-mark",
      name: "Set mark",
      callback: () => setGlobalMark(this)
    });
    this.addCommand({
      id: "go-to-mark",
      name: "Go to mark",
      callback: () => goToGlobalMark(this)
    });
    this.addCommand({
      id: "delete-mark",
      name: "Delete mark",
      callback: () => deleteGlobalMark(this)
    });
    this.addCommand({
      id: "add-file-to-harpoon",
      name: "Add file to Harpoon",
      callback: () => addFileToHarpoon(this)
    });
    this.addCommand({
      id: "go-to-harpoon-mark",
      name: "Go to Harpoon mark",
      callback: () => goToHarpoonMark(this)
    });
    this.addSettingTab(new SettingsTab(this.app, this));
    console.log("loading " + this.manifest.id);
  }
  async saveSettings() {
    await saveSettings(this, this.settings);
  }
  async saveMarks(marks) {
    this.marks = marks;
    await saveMarks(this, marks);
  }
  async saveLastChangedMark(lastChangedMark) {
    this.lastChangedMark = lastChangedMark;
    await saveLastChangedMark(this, lastChangedMark);
  }
  onunload() {
    console.log("unloading " + this.manifest.id);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3BsdWdpbk9wZXJhdGlvbnMudHMiLCAibm9kZV9tb2R1bGVzL3RldGhlci1tYXJrcy1jb3JlL2Rpc3QvbWFya3MuanMiLCAibm9kZV9tb2R1bGVzL3RldGhlci1tYXJrcy1jb3JlL2Rpc3QvZGVmYXVsdFZhbHVlcy5qcyIsICJzcmMvdXRpbHMvb2JzaWRpYW5VdGlscy50cyIsICJzcmMvdWkvTWFya0xpc3RNb2RhbC50cyIsICJzcmMvdXRpbHMvZGVmYXVsdFZhbHVlcy50cyIsICJzcmMvdXRpbHMva2V5YmluZHMudHMiLCAic3JjL2NvbW1hbmRzLnRzIiwgInNyYy91aS9TZXR0aW5nc1RhYi50cyIsICJzcmMvdXRpbHMvc3RvcmFnZS50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgc2V0R2xvYmFsTWFyaywgZ29Ub0dsb2JhbE1hcmssIGdvVG9IYXJwb29uTWFyaywgYWRkRmlsZVRvSGFycG9vbiwgZGVsZXRlR2xvYmFsTWFyayB9IGZyb20gJy4vY29tbWFuZHMnO1xuaW1wb3J0IHsgU2V0dGluZ3NUYWIgfSBmcm9tICcuL3VpL1NldHRpbmdzVGFiJztcbmltcG9ydCB7IGxvYWRTZXR0aW5ncywgc2F2ZVNldHRpbmdzLCBsb2FkTWFya3MsIHNhdmVNYXJrcywgbG9hZExhc3RDaGFuZ2VkTWFyaywgc2F2ZUxhc3RDaGFuZ2VkTWFyaywgSlNPTnNjaGVtYUNoZWNrIH0gZnJvbSAnLi91dGlscy9zdG9yYWdlJztcbmltcG9ydCB7IE1hcmsgfSBmcm9tICd0ZXRoZXItbWFya3MtY29yZSc7XG5pbXBvcnQgeyBPYnNpZGlhbk1hcmtzU2V0dGluZ3MgfSBmcm9tICcuL3R5cGVzJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXRoZXJNYXJrc1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2V0dGluZ3MhOiBPYnNpZGlhbk1hcmtzU2V0dGluZ3M7XG4gICAgbWFya3M6IE1hcmtbXSA9IFtdO1xuICAgIGxhc3RDaGFuZ2VkTWFyazogTWFyayB8IG51bGwgPSBudWxsO1xuXG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICBhd2FpdCBKU09Oc2NoZW1hQ2hlY2sodGhpcyk7XG5cbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IGF3YWl0IGxvYWRTZXR0aW5ncyh0aGlzKTtcbiAgICAgICAgdGhpcy5tYXJrcyA9IGF3YWl0IGxvYWRNYXJrcyh0aGlzKTtcbiAgICAgICAgdGhpcy5sYXN0Q2hhbmdlZE1hcmsgPSBhd2FpdCBsb2FkTGFzdENoYW5nZWRNYXJrKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ3NldC1tYXJrJyxcbiAgICAgICAgICAgIG5hbWU6ICdTZXQgbWFyaycsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gc2V0R2xvYmFsTWFyayh0aGlzKSxcbiAgICAgICAgfSk7XG5cblxuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ2dvLXRvLW1hcmsnLFxuICAgICAgICAgICAgbmFtZTogJ0dvIHRvIG1hcmsnLFxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IGdvVG9HbG9iYWxNYXJrKHRoaXMpLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6ICdkZWxldGUtbWFyaycsXG4gICAgICAgICAgICBuYW1lOiAnRGVsZXRlIG1hcmsnLFxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IGRlbGV0ZUdsb2JhbE1hcmsodGhpcyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ2FkZC1maWxlLXRvLWhhcnBvb24nLFxuICAgICAgICAgICAgbmFtZTogJ0FkZCBmaWxlIHRvIEhhcnBvb24nLFxuICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IGFkZEZpbGVUb0hhcnBvb24odGhpcyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ2dvLXRvLWhhcnBvb24tbWFyaycsXG4gICAgICAgICAgICBuYW1lOiAnR28gdG8gSGFycG9vbiBtYXJrJyxcbiAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiBnb1RvSGFycG9vbk1hcmsodGhpcyksXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgU2V0dGluZ3NUYWIodGhpcy5hcHAsIHRoaXMpKTtcblxuICAgICAgICBjb25zb2xlLmxvZygnbG9hZGluZyAnICsgdGhpcy5tYW5pZmVzdC5pZCk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgICAgICBhd2FpdCBzYXZlU2V0dGluZ3ModGhpcywgdGhpcy5zZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2F2ZU1hcmtzKG1hcmtzOiBNYXJrW10pIHtcbiAgICAgICAgdGhpcy5tYXJrcyA9IG1hcmtzO1xuICAgICAgICBhd2FpdCBzYXZlTWFya3ModGhpcywgbWFya3MpO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVMYXN0Q2hhbmdlZE1hcmsobGFzdENoYW5nZWRNYXJrOiBNYXJrKSB7XG4gICAgICAgIHRoaXMubGFzdENoYW5nZWRNYXJrID0gbGFzdENoYW5nZWRNYXJrO1xuICAgICAgICBhd2FpdCBzYXZlTGFzdENoYW5nZWRNYXJrKHRoaXMsIGxhc3RDaGFuZ2VkTWFyayk7XG4gICAgfVxuXG4gICAgb251bmxvYWQoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCd1bmxvYWRpbmcgJyArIHRoaXMubWFuaWZlc3QuaWQpO1xuICAgIH1cbn0iLCAiaW1wb3J0IHsgTm90aWNlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCBUZXRoZXJNYXJrc1BsdWdpbiBmcm9tIFwiLi9tYWluXCI7XHJcbmltcG9ydCB7IGRlbGV0ZU1hcmssIGZpbmRGaXJzdFVudXNlZFJlZ2lzdGVyLCBNYXJrLCByZW1vdmVHYXBzRm9ySGFycG9vbk1hcmtzLCByZXN0b3JlTGFzdENoYW5nZWRNYXJrLCBzZXROZXdPck92ZXJ3cml0ZU1hcmsgfSBmcm9tIFwidGV0aGVyLW1hcmtzLWNvcmVcIjtcclxuaW1wb3J0IHsgbmF2aWdhdGVUb09wZW5lZEZpbGVCeVBhdGgsIG9wZW5OZXdGaWxlQnlQYXRoIH0gZnJvbSBcIi4vdXRpbHMvb2JzaWRpYW5VdGlsc1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBsdWdpblNldE5ld09yT3ZlcndyaXRlTWFyayhwbHVnaW46IFRldGhlck1hcmtzUGx1Z2luLCBtYXJrOiBNYXJrKSB7XHJcbiAgICBjb25zdCBmaWxlID0gcGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xyXG4gICAgaWYgKCFmaWxlKSB7XHJcbiAgICAgICAgbmV3IE5vdGljZSgnTm8gYWN0aXZlIGZpbGUgdG8gbWFyay4nKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCB7IG1hcmtzLCBvdmVyd3JpdHRlbk1hcmsgfSA9IHNldE5ld09yT3ZlcndyaXRlTWFyayhwbHVnaW4ubWFya3MsIG1hcmssIGZpbGUucGF0aCk7XHJcbiAgICBhd2FpdCBwbHVnaW4uc2F2ZU1hcmtzKG1hcmtzKTtcclxuICAgIGlmIChvdmVyd3JpdHRlbk1hcmspIHtcclxuICAgICAgICBhd2FpdCBwbHVnaW4uc2F2ZUxhc3RDaGFuZ2VkTWFyayhvdmVyd3JpdHRlbk1hcmspO1xyXG4gICAgfVxyXG4gICAgbmV3IE5vdGljZShgU2V0IG1hcmsgJyR7bWFyay5zeW1ib2x9JyB0byAke2ZpbGUubmFtZX1gKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBsdWdpbkdvVG9NYXJrKHBsdWdpbjogVGV0aGVyTWFya3NQbHVnaW4sIG1hcms6IE1hcmspIHtcclxuICAgIGNvbnN0IHN1Y2Nlc3MgPSBuYXZpZ2F0ZVRvT3BlbmVkRmlsZUJ5UGF0aChtYXJrLmZpbGVQYXRoLCBwbHVnaW4uc2V0dGluZ3MuZXhwZXJpbWVudGFsR290bywgcGx1Z2luLmFwcCk7XHJcbiAgICAvLyBJZiBmaWxlIG5vdCBvcGVuLCB0aGVuIG9wZW4gaXQgaW4gdGhlIHByZWZlcnJlZCB0YWJcclxuICAgIGlmICghc3VjY2Vzcykge1xyXG4gICAgICAgIG9wZW5OZXdGaWxlQnlQYXRoKG1hcmsuZmlsZVBhdGgsIHBsdWdpbi5zZXR0aW5ncy5vcGVuTWFya0luTmV3VGFiLCBwbHVnaW4uYXBwKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBsdWdpbkRlbGV0ZU1hcmsocGx1Z2luOiBUZXRoZXJNYXJrc1BsdWdpbiwgbWFyazogTWFyaykge1xyXG4gICAgY29uc3QgeyBtYXJrcywgZGVsZXRlZE1hcmsgfSA9IGRlbGV0ZU1hcmsocGx1Z2luLm1hcmtzLCBtYXJrKTtcclxuICAgIGF3YWl0IHBsdWdpbi5zYXZlTWFya3MobWFya3MpO1xyXG5cclxuICAgIGlmIChkZWxldGVkTWFyaykge1xyXG4gICAgICAgIGF3YWl0IHBsdWdpbi5zYXZlTGFzdENoYW5nZWRNYXJrKGRlbGV0ZWRNYXJrKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocGx1Z2luLnNldHRpbmdzLmhhcnBvb25SZWdpc3RlckdhcFJlbW92YWwpIHtcclxuICAgICAgICBwbHVnaW5SZW1vdmVHYXBzRm9ySGFycG9vbk1hcmtzKHBsdWdpbik7XHJcbiAgICB9XHJcblxyXG4gICAgbmV3IE5vdGljZShgRGVsZXRlZCBtYXJrICcke2RlbGV0ZWRNYXJrPy5zeW1ib2x9J2ApO1xyXG59O1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBsdWdpblJlc3RvcmVMYXN0Q2hhbmdlZE1hcmsocGx1Z2luOiBUZXRoZXJNYXJrc1BsdWdpbikge1xyXG4gICAgLy8gVW5kbyB0aGUgbGFzdCBjaGFuZ2VkIG1hcmtcclxuICAgIGlmIChwbHVnaW4ubGFzdENoYW5nZWRNYXJrKSB7XHJcbiAgICAgICAgY29uc3Qgb3V0ID0gcmVzdG9yZUxhc3RDaGFuZ2VkTWFyayhwbHVnaW4ubWFya3MsIHBsdWdpbi5sYXN0Q2hhbmdlZE1hcmspXHJcbiAgICAgICAgYXdhaXQgcGx1Z2luLnNhdmVNYXJrcyhvdXQubWFya3MpO1xyXG4gICAgICAgIG5ldyBOb3RpY2UoYFJlc3RvcmVkIG1hcmsgJyR7cGx1Z2luLmxhc3RDaGFuZ2VkTWFyay5zeW1ib2x9JyB0byAke3BsdWdpbi5sYXN0Q2hhbmdlZE1hcmsuZmlsZVBhdGh9YCk7XHJcbiAgICAgICAgaWYgKG91dC5tYXJrVG9EaXNjYXJkKSB7XHJcbiAgICAgICAgICAgIHBsdWdpbi5zYXZlTGFzdENoYW5nZWRNYXJrKG91dC5tYXJrVG9EaXNjYXJkKTtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5ldyBOb3RpY2UoJ05vIGxhc3QgY2hhbmdlZCBtYXJrIHRvIHJlc3RvcmUuJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwbHVnaW5BZGRGaWxlVG9IYXJwb29uKHBsdWdpbjogVGV0aGVyTWFya3NQbHVnaW4pIHtcclxuICAgIC8vIEFkZCB0aGUgc2VsZWN0ZWQgbWFyayB0byB0aGUgSGFycG9vbiBsaXN0XHJcbiAgICBjb25zdCBoYXJwb29uUmVnaXN0ZXJzID0gcGx1Z2luLnNldHRpbmdzLmhhcnBvb25SZWdpc3Rlckxpc3Quc3BsaXQoJycpO1xyXG4gICAgY29uc3QgcmVnID0gZmluZEZpcnN0VW51c2VkUmVnaXN0ZXIocGx1Z2luLm1hcmtzLCBoYXJwb29uUmVnaXN0ZXJzKTtcclxuXHJcbiAgICBpZiAocmVnKSB7XHJcbiAgICAgICAgY29uc3QgZmlsZSA9IHBsdWdpbi5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcclxuICAgICAgICBpZiAoIWZpbGUpIHtcclxuICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gYWN0aXZlIGZpbGUgdG8gbWFyay4nKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBwbHVnaW5TZXROZXdPck92ZXJ3cml0ZU1hcmsocGx1Z2luLCB7IHN5bWJvbDogcmVnLCBmaWxlUGF0aDogZmlsZS5wYXRoIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gSWYgYWxsIHJlZ2lzdGVycyBhcmUgdXNlZCwgc2hvdyBhIG5vdGljZVxyXG4gICAgICAgIG5ldyBOb3RpY2UoJ0hhcnBvb24gcmVnaXN0ZXJzIGFyZSBmdWxsLCBjYW5ub3QgYWRkIG1vcmUgbWFya3MuJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwbHVnaW5SZW1vdmVHYXBzRm9ySGFycG9vbk1hcmtzKHBsdWdpbjogVGV0aGVyTWFya3NQbHVnaW4pIHtcclxuICAgIGNvbnN0IGhhcnBvb25SZWdpc3RlcnMgPSBwbHVnaW4uc2V0dGluZ3MuaGFycG9vblJlZ2lzdGVyTGlzdC5zcGxpdCgnJyk7XHJcbiAgICBjb25zdCBtYXJrcyA9IHJlbW92ZUdhcHNGb3JIYXJwb29uTWFya3MocGx1Z2luLm1hcmtzLCBoYXJwb29uUmVnaXN0ZXJzKTtcclxuICAgIGF3YWl0IHBsdWdpbi5zYXZlTWFya3MobWFya3MpO1xyXG59XHJcbiIsICJleHBvcnQgZnVuY3Rpb24gZmluZEZpcnN0VW51c2VkUmVnaXN0ZXIobWFya3MsIHJlZ2lzdGVycykge1xuICAgIGZvciAoY29uc3QgcmVnIG9mIHJlZ2lzdGVycykge1xuICAgICAgICAvLyBpZiByZWdpc3RlciBub3QgdXNlZCBhbHJlYWR5LCB0aGVuIHVzZSBpdFxuICAgICAgICAvLyBjb25zb2xlLmxvZygnQ2hlY2tpbmcgcmVnaXN0ZXI6JywgcmVnKTtcbiAgICAgICAgaWYgKCEobWFya3MubWFwKG0gPT4gbS5zeW1ib2wpLmluY2x1ZGVzKHJlZykpKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE1hcmtCeVN5bWJvbChtYXJrcywgc3ltYm9sKSB7XG4gICAgcmV0dXJuIG1hcmtzLmZpbmQobSA9PiBtLnN5bWJvbCA9PT0gc3ltYm9sKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzb3J0TWFya3NBbHBoYWJldGljYWxseShtYXJrcykge1xuICAgIG1hcmtzLnNvcnQoKGEsIGIpID0+IGEuc3ltYm9sLmxvY2FsZUNvbXBhcmUoYi5zeW1ib2wpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTb3J0ZWRBbmRGaWx0ZXJlZE1hcmtzKG1hcmtzLCBpc0hhcnBvb25Nb2RlLCBzZXR0aW5ncykge1xuICAgIGNvbnN0IGF2YWlsYWJsZVJlZ2lzdGVycyA9IG5ldyBTZXQoKCFpc0hhcnBvb25Nb2RlID8gc2V0dGluZ3MucmVnaXN0ZXJMaXN0IDogc2V0dGluZ3MuaGFycG9vblJlZ2lzdGVyTGlzdCkuc3BsaXQoJycpKTtcbiAgICBjb25zdCBmaWx0ZXJlZE1hcmtzID0gbWFya3MuZmlsdGVyKGVsID0+IGF2YWlsYWJsZVJlZ2lzdGVycy5oYXMoZWwuc3ltYm9sKSk7XG4gICAgaWYgKCFpc0hhcnBvb25Nb2RlICYmIHNldHRpbmdzLnJlZ2lzdGVyU29ydEJ5TGlzdCkge1xuICAgICAgICAvLyBTb3J0IG1hcmtzIGJ5IHRoZSBvcmRlciBvZiB0aGUga2V5IHN5bWJvbHMgaW4gdGhlIHJlZ2lzdGVyIGxpc3RcbiAgICAgICAgY29uc3QgcmVnaXN0ZXJMaXN0ID0gc2V0dGluZ3MucmVnaXN0ZXJMaXN0O1xuICAgICAgICBzb3J0TWFya3NCeVNldHRpbmdzUmVnaXN0ZXJPcmRlcihmaWx0ZXJlZE1hcmtzLCByZWdpc3Rlckxpc3QpO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0hhcnBvb25Nb2RlICYmIHNldHRpbmdzLmhhcnBvb25SZWdpc3RlclNvcnRCeUxpc3QpIHtcbiAgICAgICAgLy8gU29ydCBtYXJrcyBieSB0aGUgb3JkZXIgb2YgdGhlIGtleSBzeW1ib2xzIGluIHRoZSBoYXJwb29uIHJlZ2lzdGVyIGxpc3RcbiAgICAgICAgY29uc3QgcmVnaXN0ZXJMaXN0ID0gc2V0dGluZ3MuaGFycG9vblJlZ2lzdGVyTGlzdDtcbiAgICAgICAgc29ydE1hcmtzQnlTZXR0aW5nc1JlZ2lzdGVyT3JkZXIoZmlsdGVyZWRNYXJrcywgcmVnaXN0ZXJMaXN0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHNvcnRNYXJrc0FscGhhYmV0aWNhbGx5KGZpbHRlcmVkTWFya3MpO1xuICAgIH1cbiAgICByZXR1cm4gZmlsdGVyZWRNYXJrcztcbn1cbmV4cG9ydCBmdW5jdGlvbiBzb3J0TWFya3NCeVNldHRpbmdzUmVnaXN0ZXJPcmRlcihtYXJrcywgcmVnaXN0ZXJzKSB7XG4gICAgY29uc3QgcmVnaXN0ZXJPcmRlciA9IG5ldyBNYXAoWy4uLnJlZ2lzdGVyc10ubWFwKChzeW1ib2wsIGluZGV4KSA9PiBbc3ltYm9sLCBpbmRleF0pKTtcbiAgICBtYXJrcy5zb3J0KChhLCBiKSA9PiB7IHZhciBfYSwgX2I7IHJldHVybiAoKF9hID0gcmVnaXN0ZXJPcmRlci5nZXQoYS5zeW1ib2wpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBJbmZpbml0eSkgLSAoKF9iID0gcmVnaXN0ZXJPcmRlci5nZXQoYi5zeW1ib2wpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBJbmZpbml0eSk7IH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUdhcHNGb3JIYXJwb29uTWFya3MobWFya3NUb0NvcHksIGhhcnBvb25SZWdpc3RlcnMpIHtcbiAgICBsZXQgbWFya3MgPSBbLi4ubWFya3NUb0NvcHldO1xuICAgIGxldCBsZWZ0Q3VyID0gMDtcbiAgICBsZXQgcmlnaHRDdXIgPSAwO1xuICAgIHdoaWxlIChyaWdodEN1ciA8IGhhcnBvb25SZWdpc3RlcnMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IG1hcmtFbCA9IG1hcmtzLmZpbmQoZWwgPT4gZWwuc3ltYm9sID09PSBoYXJwb29uUmVnaXN0ZXJzW3JpZ2h0Q3VyXSk7XG4gICAgICAgIGlmIChtYXJrRWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3Qgc3ltYm9sVG9TZXRUbyA9IGhhcnBvb25SZWdpc3RlcnNbbGVmdEN1cl07XG4gICAgICAgICAgICBsZXQgZmlsdGVyZWRNYXJrcyA9IG1hcmtzLmZpbHRlcihlbCA9PiBlbC5zeW1ib2wgIT09IGhhcnBvb25SZWdpc3RlcnNbbGVmdEN1cl0pO1xuICAgICAgICAgICAgZmlsdGVyZWRNYXJrcy5wdXNoKHsgc3ltYm9sOiBzeW1ib2xUb1NldFRvLCBmaWxlUGF0aDogbWFya0VsLmZpbGVQYXRoIH0pO1xuICAgICAgICAgICAgbWFya3MgPSBmaWx0ZXJlZE1hcmtzO1xuICAgICAgICAgICAgbGVmdEN1ciArPSAxO1xuICAgICAgICB9XG4gICAgICAgIHJpZ2h0Q3VyICs9IDE7XG4gICAgfVxuICAgIHdoaWxlIChsZWZ0Q3VyIDwgaGFycG9vblJlZ2lzdGVycy5sZW5ndGgpIHtcbiAgICAgICAgbWFya3MgPSBtYXJrcy5maWx0ZXIoZWwgPT4gZWwuc3ltYm9sICE9PSBoYXJwb29uUmVnaXN0ZXJzW2xlZnRDdXJdKTtcbiAgICAgICAgbGVmdEN1ciArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gbWFya3M7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVzdG9yZUxhc3RDaGFuZ2VkTWFyayhtYXJrcywgbGFzdENoYW5nZWRNYXJrKSB7XG4gICAgY29uc3QgbWFya1RvUmVzdG9yZSA9IHsgLi4ubGFzdENoYW5nZWRNYXJrIH07XG4gICAgY29uc3QgbWFya1RvRGlzY2FyZCA9IG1hcmtzLmZpbmQobSA9PiBtLnN5bWJvbCA9PT0gbWFya1RvUmVzdG9yZS5zeW1ib2wpO1xuICAgIGNvbnN0IG1hcmtzV2l0aG91dERpc2NhcmRlZCA9IG1hcmtzLmZpbHRlcihtID0+IG0uc3ltYm9sICE9PSBtYXJrVG9SZXN0b3JlLnN5bWJvbCk7XG4gICAgbWFya3NXaXRob3V0RGlzY2FyZGVkLnB1c2goeyBzeW1ib2w6IG1hcmtUb1Jlc3RvcmUuc3ltYm9sLCBmaWxlUGF0aDogbWFya1RvUmVzdG9yZS5maWxlUGF0aCB9KTtcbiAgICByZXR1cm4geyBtYXJrczogbWFya3NXaXRob3V0RGlzY2FyZGVkLCBtYXJrVG9EaXNjYXJkOiBtYXJrVG9EaXNjYXJkIH07XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0TmV3T3JPdmVyd3JpdGVNYXJrKG1hcmtzLCBzZXRNYXJrLCBmaWxlUGF0aCkge1xuICAgIGNvbnN0IHsgbWFya3M6IGZpbHRlcmVkTWFya3MsIGRlbGV0ZWRNYXJrOiBvdmVyd3JpdHRlbk1hcmsgfSA9IGRlbGV0ZU1hcmsobWFya3MsIHNldE1hcmspO1xuICAgIGZpbHRlcmVkTWFya3MucHVzaCh7IHN5bWJvbDogc2V0TWFyay5zeW1ib2wsIGZpbGVQYXRoOiBmaWxlUGF0aCB9KTtcbiAgICByZXR1cm4geyBtYXJrczogZmlsdGVyZWRNYXJrcywgb3ZlcndyaXR0ZW5NYXJrIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlTWFyayhtYXJrcywgbWFya1RvRGVsZXRlKSB7XG4gICAgY29uc3QgY01hcmsgPSB7IC4uLm1hcmtUb0RlbGV0ZSB9O1xuICAgIGNvbnN0IGRlbGV0ZWRNYXJrID0gbWFya3MuZmluZChtID0+IG0uc3ltYm9sID09PSBjTWFyay5zeW1ib2wpO1xuICAgIGNvbnN0IGZpbHRlcmVkTWFya3MgPSBtYXJrcy5maWx0ZXIobSA9PiBtLnN5bWJvbCAhPT0gY01hcmsuc3ltYm9sKTtcbiAgICByZXR1cm4geyBtYXJrczogZmlsdGVyZWRNYXJrcywgZGVsZXRlZE1hcmsgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc01hcmtJbkxpc3QobWFya3MsIG1hcmspIHtcbiAgICByZXR1cm4gbWFya3Muc29tZShtID0+IG0uc3ltYm9sID09PSBtYXJrLnN5bWJvbCAmJiBtLmZpbGVQYXRoID09PSBtYXJrLmZpbGVQYXRoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc01hcmtJbkxpc3RCeVN5bWJvbChtYXJrcywgc3ltYm9sKSB7XG4gICAgcmV0dXJuIG1hcmtzLnNvbWUobSA9PiBtLnN5bWJvbCA9PT0gc3ltYm9sKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc01hcmtJbkxpc3RCeUZpbGVQYXRoKG1hcmtzLCBmaWxlUGF0aCkge1xuICAgIHJldHVybiBtYXJrcy5zb21lKG0gPT4gbS5maWxlUGF0aCA9PT0gZmlsZVBhdGgpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdvdG9NYXJrTmV4dChtYXJrcywgcmVnaXN0ZXJzLCBjdXJyZW50TWFyaykge1xuICAgIGNvbnN0IHNvcnRlZE1hcmtzID0gWy4uLm1hcmtzXTtcbiAgICBzb3J0TWFya3NCeVNldHRpbmdzUmVnaXN0ZXJPcmRlcihzb3J0ZWRNYXJrcywgcmVnaXN0ZXJzKTtcbiAgICBjb25zdCBjdXJyZW50SW5kZXggPSBzb3J0ZWRNYXJrcy5maW5kSW5kZXgobSA9PiBtLnN5bWJvbCA9PT0gY3VycmVudE1hcmsuc3ltYm9sICYmIG0uZmlsZVBhdGggPT09IGN1cnJlbnRNYXJrLmZpbGVQYXRoKTtcbiAgICBpZiAoY3VycmVudEluZGV4ID09PSAtMSB8fCBjdXJyZW50SW5kZXggPT09IG1hcmtzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsgLy8gTm8gbmV4dCBtYXJrXG4gICAgfVxuICAgIHJldHVybiBzb3J0ZWRNYXJrc1tjdXJyZW50SW5kZXggKyAxXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnb3RvTWFya1ByZXZpb3VzKG1hcmtzLCByZWdpc3RlcnMsIGN1cnJlbnRNYXJrKSB7XG4gICAgY29uc3Qgc29ydGVkTWFya3MgPSBbLi4ubWFya3NdO1xuICAgIHNvcnRNYXJrc0J5U2V0dGluZ3NSZWdpc3Rlck9yZGVyKHNvcnRlZE1hcmtzLCByZWdpc3RlcnMpO1xuICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IHNvcnRlZE1hcmtzLmZpbmRJbmRleChtID0+IG0uc3ltYm9sID09PSBjdXJyZW50TWFyay5zeW1ib2wgJiYgbS5maWxlUGF0aCA9PT0gY3VycmVudE1hcmsuZmlsZVBhdGgpO1xuICAgIGlmIChjdXJyZW50SW5kZXggPD0gMCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBObyBwcmV2aW91cyBtYXJrXG4gICAgfVxuICAgIHJldHVybiBtYXJrc1tjdXJyZW50SW5kZXggLSAxXTtcbn1cbiIsICIvLyBUaGlzIGlzIG5vdCB1c2VkIGZvciBub3dcbmV4cG9ydCBjb25zdCBtb2RhbFBsYWNlaG9sZGVyTWVzc2FnZXMgPSB7XG4gICAgc2V0OiAnU2VsZWN0IGEgbWFyayB0byBzZXQnLFxuICAgIGdvdG86ICdTZWxlY3QgYSBtYXJrIHRvIGdvIHRvJyxcbiAgICBkZWxldGU6ICdTZWxlY3QgYSBtYXJrIHRvIGRlbGV0ZScsXG59O1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRCYXNpY01hcmtzU2V0dGluZ3MgPSB7XG4gICAgcmVnaXN0ZXJMaXN0OiAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLFxuICAgIHJlZ2lzdGVyU29ydEJ5TGlzdDogdHJ1ZSxcbiAgICBoYXJwb29uUmVnaXN0ZXJMaXN0OiAncXdlcicsXG4gICAgaGFycG9vblJlZ2lzdGVyU29ydEJ5TGlzdDogdHJ1ZSxcbiAgICBoYXJwb29uUmVnaXN0ZXJHYXBSZW1vdmFsOiB0cnVlLFxufTtcbmV4cG9ydCBjb25zdCBtb2RlRGVzY3JpcHRpb24gPSB7XG4gICAgJ3NldCc6ICdTZXQgbWFyaycsXG4gICAgJ2dvdG8nOiAnR28gdG8gbWFyaycsXG4gICAgJ2RlbGV0ZSc6ICdEZWxldGUgbWFyaydcbn07XG4iLCAiaW1wb3J0IHsgQXBwLCBub3JtYWxpemVQYXRoLCBOb3RpY2UsIFRGaWxlLCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb3Blbk5ld0ZpbGVCeVBhdGgoZmlsZVBhdGg6IHN0cmluZywgb3BlbkZpbGVJbk5ld1RhYjogYm9vbGVhbiwgYXBwOiBBcHApIHtcclxuICAgIGNvbnN0IGZpbGUgPSBhcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGVQYXRoKTtcclxuICAgIGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcclxuICAgICAgICBpZiAob3BlbkZpbGVJbk5ld1RhYikge1xyXG4gICAgICAgICAgICBhcHAud29ya3NwYWNlLmdldExlYWYoJ3RhYicpLm9wZW5GaWxlKGZpbGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGFwcC53b3Jrc3BhY2UuZ2V0TGVhZigpLm9wZW5GaWxlKGZpbGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIG5ldyBOb3RpY2UoYEZpbGUgbm90IGZvdW5kIGZvciBwYXRoICR7ZmlsZVBhdGh9LiBUaGUgZmlsZSBtYXkgaGF2ZSBiZWVuIGRlbGV0ZWQsIG1vdmVkIG9yIHJlbmFtZWQuYCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGaW5kcyBhbGwgb3BlbmVkIGZpbGVzIGluIHRoZSBtYWluIGFyZWEgdGhyb3VnaCB3b3Jrc3BhY2UuZ2V0TGF5b3V0KCkuIE5vdCBBUEkgY29tcGxpYW50LiBDYW4gYnJlYWsgYW55dGltZS4gR2V0cyBhbGwgb3BlbmVkIGZpbGVzIHJlZ2FyZGxlc3Mgb2Ygc3RhdGUuIFxyXG4gKiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsT3BlbmVkRmlsZXNFeHBlcmltZW50YWwoYXBwOiBBcHApOiBhbnkge1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgY29uc3QgdGFiR3JvdXBzID0gYXBwLndvcmtzcGFjZS5nZXRMYXlvdXQoKS5tYWluPy5jaGlsZHJlbjtcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBlbCBvZiB0YWJHcm91cHMpIHtcclxuICAgICAgICBvdXQucHVzaCguLi5lbC5jaGlsZHJlbilcclxuICAgIH1cclxuICAgIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGaW5kcyBhbGwgd29ya3NwYWNlIGxlYXZlcyB0aHJvdWdoIHdvcmtzcGFjZS5pdGVyYXRlQWxsTGVhdmVzLiBBUEkgY29tcGxpYW50LiBJZ25vcmVzIGFsbCB0aGUgbm9uIGluc3RhbnRpYXRlZCBsZWF2ZXMuXHJcbiAqICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxXb3Jrc3BhY2VMZWF2ZXMoYXBwOiBBcHApOiBXb3Jrc3BhY2VMZWFmW10ge1xyXG4gICAgY29uc3QgbGlzdDogV29ya3NwYWNlTGVhZltdID0gW11cclxuICAgIGFwcC53b3Jrc3BhY2UuaXRlcmF0ZUFsbExlYXZlcyhsZWFmID0+IHtcclxuICAgICAgICBsaXN0LnB1c2gobGVhZik7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gbGlzdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldHMgYWN0aXZlIGFuIG9wZW5lZCBmaWxlIHRoYXQgbWF0Y2hlcyB0aGUgaW5wdXQgZmlsZSBwYXRoLiBSZXNwZWN0cyB0YWIgZ3JvdXBpbmcuIFJldHVybnMgc3VjY2VzcyBib29sLiAgXHJcbiAqIEBwdWJsaWNcclxuICogKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRlVG9PcGVuZWRGaWxlQnlQYXRoKGZpbGVQYXRoOiBzdHJpbmcsIGV4cGVyaW1lbnRhbEdvdG86IGJvb2xlYW4sIGFwcDogQXBwKTogYm9vbGVhbiB7XHJcbiAgICBpZiAoZXhwZXJpbWVudGFsR290bykge1xyXG4gICAgICAgIGNvbnN0IG9wZW5lZEZpbGVzID0gZ2V0QWxsT3BlbmVkRmlsZXNFeHBlcmltZW50YWwoYXBwKVxyXG4gICAgICAgIGZvciAoY29uc3Qgb3BlbmVkRmlsZSBvZiBvcGVuZWRGaWxlcykge1xyXG4gICAgICAgICAgICBpZiAob3BlbmVkRmlsZS50eXBlID09ICdsZWFmJyAmJiBvcGVuZWRGaWxlLnN0YXRlLnN0YXRlLmZpbGUgPT09IGZpbGVQYXRoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWFmID0gYXBwLndvcmtzcGFjZS5nZXRMZWFmQnlJZChvcGVuZWRGaWxlLmlkKTtcclxuICAgICAgICAgICAgICAgIGlmIChsZWFmICYmIGxlYWYucGFyZW50ID09PSBhcHAud29ya3NwYWNlLmdldExlYWYoKS5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcHAud29ya3NwYWNlLnNldEFjdGl2ZUxlYWYobGVhZiwgeyBmb2N1czogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IGxlYXZlcyA9IGdldEFsbFdvcmtzcGFjZUxlYXZlcyhhcHApO1xyXG4gICAgICAgIGZvciAoY29uc3QgbGVhZiBvZiBsZWF2ZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgdmlldyA9IGxlYWYudmlldztcclxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgICAgICAgICBpZiAodmlldy5maWxlICYmIHZpZXcuZmlsZS5wYXRoID09PSBmaWxlUGF0aCAmJiBsZWFmLnBhcmVudCA9PT0gYXBwLndvcmtzcGFjZS5nZXRMZWFmKCkucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBhcHAud29ya3NwYWNlLnNldEFjdGl2ZUxlYWYobGVhZiwgeyBmb2N1czogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBmYWxzZTtcclxufSIsICJpbXBvcnQgeyBBcHAsIFN1Z2dlc3RNb2RhbCwgUGxhdGZvcm0sIEluc3RydWN0aW9uIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IFRldGhlck1hcmtzUGx1Z2luIGZyb20gJy4uL21haW4nO1xuaW1wb3J0IHsgbW9kYWxNYXJrRmlsZXBhdGhDbGFzcywgbW9kYWxNYXJrU3ltYm9sQ2xhc3MsIG1vZGFsTWFya0hhcnBvb25TaWduIH0gZnJvbSAnLi4vdXRpbHMvZGVmYXVsdFZhbHVlcyc7XG5pbXBvcnQgeyBtYXRjaEtleWJpbmQsIHByZXBhcmVLZXliaW5kcyB9IGZyb20gJy4uL3V0aWxzL2tleWJpbmRzJztcbmltcG9ydCB7IHBsdWdpbkRlbGV0ZU1hcmssIHBsdWdpbkdvVG9NYXJrLCBwbHVnaW5SZXN0b3JlTGFzdENoYW5nZWRNYXJrLCBwbHVnaW5TZXROZXdPck92ZXJ3cml0ZU1hcmsgfSBmcm9tICcuLi9wbHVnaW5PcGVyYXRpb25zJztcbmltcG9ydCB7IGdldE1hcmtCeVN5bWJvbCwgZ2V0U29ydGVkQW5kRmlsdGVyZWRNYXJrcywgTWFyaywgTW9kZSwgbW9kZURlc2NyaXB0aW9uIH0gZnJvbSAndGV0aGVyLW1hcmtzLWNvcmUnO1xuaW1wb3J0IHsgTW9kYWxLZXliaW5kcyB9IGZyb20gJy4uL3R5cGVzJztcblxuXG5leHBvcnQgY2xhc3MgTWFya0xpc3RNb2RhbCBleHRlbmRzIFN1Z2dlc3RNb2RhbDxNYXJrPiB7XG4gICAgcGx1Z2luOiBUZXRoZXJNYXJrc1BsdWdpbjtcbiAgICBtb2RlOiBNb2RlO1xuICAgIHByaXZhdGUgX2tleUhhbmRsZXI/OiAoZXZ0OiBLZXlib2FyZEV2ZW50KSA9PiB2b2lkO1xuICAgIGlzSGFycG9vbk1vZGU6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBUZXRoZXJNYXJrc1BsdWdpbiwgbW9kZTogTW9kZSwgaXNIYXJwb29uTW9kZTogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgICAgICAvLyBub3QgdXNlZCwgbm8gaW5wdXQgZmllbGRcbiAgICAgICAgLy8gdGhpcy5zZXRQbGFjZWhvbGRlcihtb2RhbFBsYWNlaG9sZGVyTWVzc2FnZXNbdGhpcy5tb2RlXSk7XG4gICAgICAgIHRoaXMuaXNIYXJwb29uTW9kZSA9IGlzSGFycG9vbk1vZGU7XG4gICAgfVxuXG4gICAgZ2V0SW5zdHJ1Y3Rpb25zKG1vZGFsS2V5YmluZHM6IE1vZGFsS2V5YmluZHMpOiBJbnN0cnVjdGlvbltdIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgY29tbWFuZDogbW9kYWxLZXliaW5kcy51cC5qb2luKFwiL1wiKSwgcHVycG9zZTogJ1VwJyB9LFxuICAgICAgICAgICAgeyBjb21tYW5kOiBtb2RhbEtleWJpbmRzLmRvd24uam9pbihcIi9cIiksIHB1cnBvc2U6ICdEb3duJyB9LFxuICAgICAgICAgICAgeyBjb21tYW5kOiAnW1N5bWJvbF0nLCBwdXJwb3NlOiBtb2RlRGVzY3JpcHRpb25bdGhpcy5tb2RlXSB9LFxuICAgICAgICAgICAgeyBjb21tYW5kOiBtb2RhbEtleWJpbmRzLnNlbGVjdC5qb2luKFwiL1wiKSwgcHVycG9zZTogbW9kZURlc2NyaXB0aW9uW3RoaXMubW9kZV0gfSxcbiAgICAgICAgICAgIHsgY29tbWFuZDogbW9kYWxLZXliaW5kcy5kZWxldGUuam9pbihcIi9cIiksIHB1cnBvc2U6ICdEZWxldGUnIH0sXG4gICAgICAgICAgICB7IGNvbW1hbmQ6IG1vZGFsS2V5YmluZHMuY2FuY2VsLmpvaW4oXCIvXCIpLCBwdXJwb3NlOiAnQ2FuY2VsJyB9LFxuICAgICAgICAgICAgeyBjb21tYW5kOiBtb2RhbEtleWJpbmRzLnVuZG8uam9pbihcIi9cIiksIHB1cnBvc2U6ICdVbmRvJyB9LFxuXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgZ2V0U3VnZ2VzdGlvbnMocXVlcnk6IHN0cmluZyk6IE1hcmtbXSB7XG4gICAgICAgIC8vIE5vIHNlYXJjaCBpbnB1dFxuICAgICAgICByZXR1cm4gZ2V0U29ydGVkQW5kRmlsdGVyZWRNYXJrcyh0aGlzLnBsdWdpbi5tYXJrcywgdGhpcy5pc0hhcnBvb25Nb2RlLCB0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XG4gICAgfVxuXG4gICAgcmVuZGVyU3VnZ2VzdGlvbihtYXJrOiBNYXJrLCBlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3Qgc3ltYm9sRWwgPSBlbC5jcmVhdGVFbCgnc3BhbicsIHsgdGV4dDogbWFyay5zeW1ib2wsIGNsczogbW9kYWxNYXJrU3ltYm9sQ2xhc3MgfSk7XG4gICAgICAgIGVsLmNyZWF0ZUVsKCdzcGFuJywgeyB0ZXh0OiBtYXJrLmZpbGVQYXRoLCBjbHM6IG1vZGFsTWFya0ZpbGVwYXRoQ2xhc3MgfSk7XG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5oYXJwb29uUmVnaXN0ZXJMaXN0LmNvbnRhaW5zKG1hcmsuc3ltYm9sKSkge1xuICAgICAgICAgICAgZWwuY3JlYXRlRWwoJ3NwYW4nLCB7IHRleHQ6IFwiSFwiLCBjbHM6IG1vZGFsTWFya0hhcnBvb25TaWduIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpPy5wYXRoID09PSBtYXJrLmZpbGVQYXRoKXtcbiAgICAgICAgICAgIHN5bWJvbEVsLmFkZENsYXNzKCdoaWdobGlnaHQnKTtcbiAgICAgICAgfVxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jIChldnQpID0+IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMub25DaG9vc2VTdWdnZXN0aW9uKG1hcmssIGV2dCk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgc3VwZXIub25PcGVuKCk7XG4gICAgICAgIC8vIEhpZGUgdGhlIGlucHV0IGJveCwgYXMgaXQncyBub3QgbmVlZGVkXG4gICAgICAgIGlmICh0aGlzLmlucHV0RWwpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRFbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubW9kYWxFbC5hZGRDbGFzcygnbWFya3MtbW9kYWwnKTtcblxuICAgICAgICBjb25zdCBtb2RhbEtleWJpbmRzID0gcHJlcGFyZUtleWJpbmRzKFBsYXRmb3JtLmlzTWFjT1MsIHRoaXMucGx1Z2luLnNldHRpbmdzKTtcbiAgICAgICAgdGhpcy5zZXRJbnN0cnVjdGlvbnModGhpcy5nZXRJbnN0cnVjdGlvbnMobW9kYWxLZXliaW5kcykpO1xuXG4gICAgICAgIHRoaXMuX2tleUhhbmRsZXIgPSB0aGlzLmdldE1vZGFsS2V5SGFuZGxlcihtb2RhbEtleWJpbmRzKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9rZXlIYW5kbGVyLCB0cnVlKTtcbiAgICB9XG5cbiAgICBvbkNsb3NlKCkge1xuICAgICAgICBpZiAodGhpcy5fa2V5SGFuZGxlcikge1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9rZXlIYW5kbGVyLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuX2tleUhhbmRsZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIub25DbG9zZSgpO1xuICAgIH1cblxuICAgIGdldE1vZGFsS2V5SGFuZGxlcihrZXliaW5kczogTW9kYWxLZXliaW5kcykge1xuICAgICAgICByZXR1cm4gYXN5bmMgKGV2dDogS2V5Ym9hcmRFdmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgYXZhaWxhYmxlUmVnaXN0ZXJzID0gbmV3IFNldCgoIXRoaXMuaXNIYXJwb29uTW9kZSA/IHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2lzdGVyTGlzdCA6IHRoaXMucGx1Z2luLnNldHRpbmdzLmhhcnBvb25SZWdpc3Rlckxpc3QpLnNwbGl0KCcnKSk7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBjaG9vc2VyID0gdGhpcy5jaG9vc2VyO1xuICAgICAgICAgICAgaWYgKGtleWJpbmRzLnVwLnNvbWUoa2IgPT4gbWF0Y2hLZXliaW5kKGV2dCwga2IpKSkge1xuICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHRoaXMubW92ZVNlbGVjdGlvbigtMSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGtleWJpbmRzLmRvd24uc29tZShrYiA9PiBtYXRjaEtleWJpbmQoZXZ0LCBrYikpKSB7XG4gICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlU2VsZWN0aW9uKDEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXliaW5kcy5kZWxldGUuc29tZShrYiA9PiBtYXRjaEtleWJpbmQoZXZ0LCBrYikpKSB7XG4gICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgaWYgKGNob29zZXIudmFsdWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSB0aGUgY3VycmVudGx5IHNlbGVjdGVkIG1hcmtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldklkeCA9IGNob29zZXIuc2VsZWN0ZWRJdGVtO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZDogTWFyayA9IGNob29zZXIudmFsdWVzW3ByZXZJZHhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHBsdWdpbkRlbGV0ZU1hcmsodGhpcy5wbHVnaW4sIHNlbGVjdGVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlZnJlc2ggdGhlIG1vZGFsIGxpc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIGNob29zZXIudmFsdWVzID0gZ2V0U29ydGVkQW5kRmlsdGVyZWRNYXJrcyh0aGlzLnBsdWdpbi5tYXJrcywgdGhpcy5pc0hhcnBvb25Nb2RlLCB0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaG9vc2VyLnNldFN1Z2dlc3Rpb25zKGNob29zZXIudmFsdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByZXNlcnZlIHNlbGVjdGlvbiBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hvb3Nlci5zZXRTZWxlY3RlZEl0ZW0oTWF0aC5tYXgoMCwgTWF0aC5taW4ocHJldklkeCwgY2hvb3Nlci52YWx1ZXMubGVuZ3RoKSksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGtleWJpbmRzLnVuZG8uc29tZShrYiA9PiBtYXRjaEtleWJpbmQoZXZ0LCBrYikpKSB7XG4gICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgLy8gUmVzdG9yZSB0aGUgbGFzdCBjaGFuZ2VkIG1hcmtcbiAgICAgICAgICAgICAgICBhd2FpdCBwbHVnaW5SZXN0b3JlTGFzdENoYW5nZWRNYXJrKHRoaXMucGx1Z2luKTtcbiAgICAgICAgICAgICAgICAvLyBSZWZyZXNoIHRoZSBtb2RhbCBsaXN0XG4gICAgICAgICAgICAgICAgY2hvb3Nlci52YWx1ZXMgPSBnZXRTb3J0ZWRBbmRGaWx0ZXJlZE1hcmtzKHRoaXMucGx1Z2luLm1hcmtzLCB0aGlzLmlzSGFycG9vbk1vZGUsIHRoaXMucGx1Z2luLnNldHRpbmdzKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2SWR4ID0gY2hvb3Nlci5zZWxlY3RlZEl0ZW07XG4gICAgICAgICAgICAgICAgY2hvb3Nlci5zZXRTdWdnZXN0aW9ucyhjaG9vc2VyLnZhbHVlcyk7XG4gICAgICAgICAgICAgICAgY2hvb3Nlci5zZXRTZWxlY3RlZEl0ZW0oTWF0aC5tYXgoMCwgcHJldklkeCksIGZhbHNlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5YmluZHMuc2VsZWN0LnNvbWUoa2IgPT4gbWF0Y2hLZXliaW5kKGV2dCwga2IpKSkge1xuICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIC8vIERlbGV0ZSB0aGUgY3VycmVudGx5IHNlbGVjdGVkIG1hcmtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmQgPSBjaG9vc2VyLnNlbGVjdGVkSXRlbTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZDogTWFyayA9IGNob29zZXIudmFsdWVzW2luZF07XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25DaG9vc2VTdWdnZXN0aW9uKHNlbGVjdGVkLCBldnQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXliaW5kcy5jYW5jZWwuc29tZShrYiA9PiBtYXRjaEtleWJpbmQoZXZ0LCBrYikpKSB7XG4gICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhdmFpbGFibGVSZWdpc3RlcnMuaGFzKGV2dC5rZXkpKSB7XG4gICAgICAgICAgICAgICAgbGV0IG1hcmsgPSBnZXRNYXJrQnlTeW1ib2wodGhpcy5wbHVnaW4ubWFya3MsIGV2dC5rZXkpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGUgPT09ICdzZXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXJrID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsgPSB7IHN5bWJvbDogZXZ0LmtleSwgZmlsZVBhdGg6IFwiXCIgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5vbkNob29zZVN1Z2dlc3Rpb24obWFyaywgZXZ0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tb2RlID09PSAnZ290bycgJiYgbWFyaykge1xuICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5vbkNob29zZVN1Z2dlc3Rpb24obWFyaywgZXZ0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLm1vZGUgPT09ICdkZWxldGUnICYmIG1hcmspIHtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMub25DaG9vc2VTdWdnZXN0aW9uKG1hcmssIGV2dCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlZnJlc2ggdGhlIG1vZGFsIGxpc3RcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBhc3luYyBvbkNob29zZVN1Z2dlc3Rpb24obWFyazogTWFyaywgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAodGhpcy5tb2RlID09PSAnc2V0Jykge1xuICAgICAgICAgICAgcGx1Z2luU2V0TmV3T3JPdmVyd3JpdGVNYXJrKHRoaXMucGx1Z2luLCBtYXJrKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09ICdnb3RvJykge1xuICAgICAgICAgICAgcGx1Z2luR29Ub01hcmsodGhpcy5wbHVnaW4sIG1hcmspO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gJ2RlbGV0ZScpIHtcbiAgICAgICAgICAgIHBsdWdpbkRlbGV0ZU1hcmsodGhpcy5wbHVnaW4sIG1hcmspO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbW92ZVNlbGVjdGlvbihkZWx0YTogbnVtYmVyKSB7XG4gICAgICAgIC8vIE1vdmUgdGhlIHNlbGVjdGlvbiB1cCBvciBkb3duIGJ5IGRlbHRhXG4gICAgICAgIC8vIHRoaXMuY2hvb3NlciBpcyBTdWdnZXN0TW9kYWwncyBpbnRlcm5hbCBjaG9vc2VyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgY29uc3QgY2hvb3NlciA9IHRoaXMuY2hvb3NlcjtcbiAgICAgICAgaWYgKCFjaG9vc2VyKSByZXR1cm47XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgbGV0IGlkeCA9IGNob29zZXIuc2VsZWN0ZWRJdGVtO1xuICAgICAgICBpZiAodHlwZW9mIGlkeCAhPT0gJ251bWJlcicpIGlkeCA9IDA7XG4gICAgICAgIGlmICghY2hvb3Nlci52YWx1ZXMpIHJldHVybjtcbiAgICAgICAgY29uc3QgbWF4ID0gY2hvb3Nlci52YWx1ZXMubGVuZ3RoO1xuICAgICAgICBsZXQgbmV4dCA9IGlkeCArIGRlbHRhO1xuICAgICAgICBpZiAobmV4dCA8IDApIG5leHQgPSBtYXggLSAxO1xuICAgICAgICBpZiAobmV4dCA+PSBtYXgpIG5leHQgPSAwO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNob29zZXIuc2V0U2VsZWN0ZWRJdGVtKG5leHQsIDAgYXMgS2V5Ym9hcmRFdmVudCk7XG4gICAgfVxuXG59IiwgImltcG9ydCB7IGRlZmF1bHRCYXNpY01hcmtzU2V0dGluZ3MgfSBmcm9tIFwidGV0aGVyLW1hcmtzLWNvcmVcIjtcclxuaW1wb3J0IHsgTW9kYWxLZXliaW5kcywgT2JzaWRpYW5NYXJrc1NldHRpbmdzfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBtb2RhbERlZmF1bHRLZXliaW5kczogTW9kYWxLZXliaW5kcyA9IHtcclxuICAgIHVwOiBbJ2N0cmwraycsICdjdHJsK3AnXSBhcyBzdHJpbmdbXSxcclxuICAgIGRvd246IFsnY3RybCtqJywgJ2N0cmwrbiddIGFzIHN0cmluZ1tdLFxyXG4gICAgZGVsZXRlOiBbJ2N0cmwrZCddIGFzIHN0cmluZ1tdLFxyXG4gICAgc2VsZWN0OiBbJ0VudGVyJ10gYXMgc3RyaW5nW10sXHJcbiAgICBjYW5jZWw6IFsnRXNjYXBlJ10gYXMgc3RyaW5nW10sXHJcbiAgICB1bmRvOiBbJ2N0cmwrdSddIGFzIHN0cmluZ1tdLFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgbW9kYWxEZWZhdWx0S2V5YmluZHNNYWM6IE1vZGFsS2V5YmluZHMgPSB7XHJcbiAgICB1cDogWydjbWQraycsICdjbWQrcCddIGFzIHN0cmluZ1tdLFxyXG4gICAgZG93bjogWydjbWQraicsICdjbWQrbiddIGFzIHN0cmluZ1tdLFxyXG4gICAgZGVsZXRlOiBbJ2NtZCtkJ10gYXMgc3RyaW5nW10sXHJcbiAgICBzZWxlY3Q6IFsnRW50ZXInXSBhcyBzdHJpbmdbXSxcclxuICAgIGNhbmNlbDogWydFc2NhcGUnXSBhcyBzdHJpbmdbXSxcclxuICAgIHVuZG86IFsnY21kK3UnXSBhcyBzdHJpbmdbXSxcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IG1vZGFsSW5zdHJ1Y3Rpb25FbENsYXNzID0gJ21vZGFsLWluc3RydWN0aW9uLWVsJztcclxuZXhwb3J0IGNvbnN0IG1vZGFsTWFya1N5bWJvbENsYXNzID0gJ21hcmstc3ltYm9sJztcclxuZXhwb3J0IGNvbnN0IG1vZGFsTWFya0ZpbGVwYXRoQ2xhc3MgPSAnbWFyay1maWxlLXBhdGgnO1xyXG5leHBvcnQgY29uc3QgbW9kYWxNYXJrSGFycG9vblNpZ24gPSAnaGFycG9vbi1zaWduJztcclxuXHJcbmV4cG9ydCBjb25zdCBKU09Oc2NoZW1hVmVyc2lvbiA9IDE7XHJcblxyXG5leHBvcnQgY29uc3QgZGVmYXVsdE9ic2lkaWFuTWFya3NTZXR0aW5ncyA6IE9ic2lkaWFuTWFya3NTZXR0aW5ncyA9IHtcclxuICAgIC4uLmRlZmF1bHRCYXNpY01hcmtzU2V0dGluZ3MsXHJcbiAgICAvLyBoaWRlTWFya0xpc3REdXJpbmdJbnB1dDogZmFsc2UsXHJcbiAgICBvcGVuTWFya0luTmV3VGFiOiBmYWxzZSwgLy8gSWYgdHJ1ZSwgb3BlbiBtYXJrIGluIG5ldyB0YWIsIGVsc2UgaW4gY3VycmVudCB0YWJcclxuICAgIGV4cGVyaW1lbnRhbEdvdG86IGZhbHNlLFxyXG4gICAgbW9kYWxMaXN0VXA6ICcnLFxyXG4gICAgbW9kYWxMaXN0RG93bjogJycsXHJcbiAgICBtb2RhbExpc3RTZWxlY3Q6ICcnLFxyXG4gICAgbW9kYWxMaXN0VW5kbzogJycsXHJcbiAgICBtb2RhbExpc3REZWxldGU6ICcnLFxyXG4gICAgbW9kYWxMaXN0Q2FuY2VsOiAnJyxcclxufVxyXG5cclxuIiwgImltcG9ydCB7IG1vZGFsRGVmYXVsdEtleWJpbmRzLCBtb2RhbERlZmF1bHRLZXliaW5kc01hYyB9IGZyb20gXCIuL2RlZmF1bHRWYWx1ZXNcIjtcclxuaW1wb3J0IHsgTW9kYWxLZXliaW5kcyB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBPYnNpZGlhbk1hcmtzU2V0dGluZ3MgfSBmcm9tIFwiLi4vdHlwZXNcIjtcclxuXHJcbi8vIFV0aWxpdHkgdG8gcHJlcGFyZSBrZXliaW5kcyBvYmplY3RcclxuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVLZXliaW5kcyhpc01hY09TOiBib29sZWFuLCBzZXR0aW5nczogT2JzaWRpYW5NYXJrc1NldHRpbmdzKSB7XHJcbiAgICBsZXQga2V5YmluZHM6IE1vZGFsS2V5YmluZHMgPSAoIWlzTWFjT1MpID8geyAuLi5tb2RhbERlZmF1bHRLZXliaW5kcyB9IDogeyAuLi5tb2RhbERlZmF1bHRLZXliaW5kc01hYyB9O1xyXG5cclxuICAgIGlmIChzZXR0aW5ncy5tb2RhbExpc3RVcCkge1xyXG4gICAgICAgIGtleWJpbmRzLnVwID0gW3NldHRpbmdzLm1vZGFsTGlzdFVwXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2V0dGluZ3MubW9kYWxMaXN0RG93bikge1xyXG4gICAgICAgIGtleWJpbmRzLmRvd24gPSBbc2V0dGluZ3MubW9kYWxMaXN0RG93bl07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNldHRpbmdzLm1vZGFsTGlzdERlbGV0ZSkge1xyXG4gICAgICAgIGtleWJpbmRzLmRlbGV0ZSA9IFtzZXR0aW5ncy5tb2RhbExpc3REZWxldGVdO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChzZXR0aW5ncy5tb2RhbExpc3RTZWxlY3QpIHtcclxuICAgICAgICBrZXliaW5kcy5zZWxlY3QgPSBbc2V0dGluZ3MubW9kYWxMaXN0U2VsZWN0XTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2V0dGluZ3MubW9kYWxMaXN0VW5kbykge1xyXG4gICAgICAgIGtleWJpbmRzLnVuZG8gPSBbc2V0dGluZ3MubW9kYWxMaXN0VW5kb107XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNldHRpbmdzLm1vZGFsTGlzdENhbmNlbCkge1xyXG4gICAgICAgIGtleWJpbmRzLmNhbmNlbCA9IFtzZXR0aW5ncy5tb2RhbExpc3RDYW5jZWxdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBrZXliaW5kcztcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXRjaEtleWJpbmQoZXZ0OiBLZXlib2FyZEV2ZW50LCBrZXliaW5kOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIC8vIFBhcnNlIGtleWJpbmQgc3RyaW5nIGxpa2UgJ2N0cmwrc2hpZnQrcCcsICdjbWQrbicsIGV0Yy5cclxuICAgIGNvbnN0IHBhcnRzID0ga2V5YmluZC5zcGxpdCgnKycpLm1hcChwID0+IHAudHJpbSgpKTtcclxuICAgIGxldCByZXF1aXJlZCA9IHsgY3RybDogZmFsc2UsIHNoaWZ0OiBmYWxzZSwgYWx0OiBmYWxzZSwgbWV0YTogZmFsc2UsIGtleTogJycgfTtcclxuICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xyXG4gICAgICAgIGlmIChwYXJ0ID09PSAnY3RybCcpIHJlcXVpcmVkLmN0cmwgPSB0cnVlO1xyXG4gICAgICAgIGVsc2UgaWYgKHBhcnQgPT09ICdzaGlmdCcpIHJlcXVpcmVkLnNoaWZ0ID0gdHJ1ZTtcclxuICAgICAgICBlbHNlIGlmIChwYXJ0ID09PSAnYWx0JykgcmVxdWlyZWQuYWx0ID0gdHJ1ZTtcclxuICAgICAgICBlbHNlIGlmIChwYXJ0ID09PSAnbWV0YScgfHwgcGFydCA9PT0gJ2NtZCcgfHwgcGFydCA9PT0gJ3dpbicpIHJlcXVpcmVkLm1ldGEgPSB0cnVlO1xyXG4gICAgICAgIGVsc2UgcmVxdWlyZWQua2V5ID0gcGFydDtcclxuICAgIH1cclxuICAgIC8vIENoZWNrIG1vZGlmaWVyc1xyXG4gICAgaWYgKGV2dC5jdHJsS2V5ICE9PSByZXF1aXJlZC5jdHJsKSByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAoZXZ0LnNoaWZ0S2V5ICE9PSByZXF1aXJlZC5zaGlmdCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKGV2dC5hbHRLZXkgIT09IHJlcXVpcmVkLmFsdCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKGV2dC5tZXRhS2V5ICE9PSByZXF1aXJlZC5tZXRhKSByZXR1cm4gZmFsc2U7XHJcbiAgICAvLyBDaGVjayBrZXkgKGNhc2UtaW5zZW5zaXRpdmUpXHJcbiAgICByZXR1cm4gZXZ0LmtleSA9PT0gcmVxdWlyZWQua2V5O1xyXG59IiwgImltcG9ydCBUZXRoZXJNYXJrc1BsdWdpbiBmcm9tICcuL21haW4nO1xyXG5pbXBvcnQgeyBwbHVnaW5BZGRGaWxlVG9IYXJwb29uIH0gZnJvbSAnLi9wbHVnaW5PcGVyYXRpb25zJztcclxuaW1wb3J0IHsgTWFya0xpc3RNb2RhbCB9IGZyb20gJy4vdWkvTWFya0xpc3RNb2RhbCc7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0R2xvYmFsTWFyayhwbHVnaW46IFRldGhlck1hcmtzUGx1Z2luKSB7XHJcbiAgICBuZXcgTWFya0xpc3RNb2RhbChwbHVnaW4uYXBwLCBwbHVnaW4sICdzZXQnKS5vcGVuKCk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnb1RvR2xvYmFsTWFyayhwbHVnaW46IFRldGhlck1hcmtzUGx1Z2luKSB7XHJcbiAgICBuZXcgTWFya0xpc3RNb2RhbChwbHVnaW4uYXBwLCBwbHVnaW4sICdnb3RvJykub3BlbigpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVsZXRlR2xvYmFsTWFyayhwbHVnaW46IFRldGhlck1hcmtzUGx1Z2luKSB7XHJcbiAgICBuZXcgTWFya0xpc3RNb2RhbChwbHVnaW4uYXBwLCBwbHVnaW4sICdkZWxldGUnKS5vcGVuKCk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYWRkRmlsZVRvSGFycG9vbihwbHVnaW46IFRldGhlck1hcmtzUGx1Z2luKSB7XHJcbiAgICBwbHVnaW5BZGRGaWxlVG9IYXJwb29uKHBsdWdpbik7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnb1RvSGFycG9vbk1hcmsocGx1Z2luOiBUZXRoZXJNYXJrc1BsdWdpbikge1xyXG4gICAgbmV3IE1hcmtMaXN0TW9kYWwocGx1Z2luLmFwcCwgcGx1Z2luLCAnZ290bycsIHRydWUpLm9wZW4oKTtcclxufSIsICJpbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgVGV0aGVyTWFya3NQbHVnaW4gZnJvbSAnLi4vbWFpbic7XG5pbXBvcnQgeyBPYnNpZGlhbk1hcmtzU2V0dGluZ3MgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBkZWZhdWx0T2JzaWRpYW5NYXJrc1NldHRpbmdzIH0gZnJvbSAnLi4vdXRpbHMvZGVmYXVsdFZhbHVlcyc7XG5cbmV4cG9ydCBjbGFzcyBTZXR0aW5nc1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICAgIHBsdWdpbjogVGV0aGVyTWFya3NQbHVnaW47XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBUZXRoZXJNYXJrc1BsdWdpbikge1xuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgICAgIGNvbnN0IGRzID0gZGVmYXVsdE9ic2lkaWFuTWFya3NTZXR0aW5ncztcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdPcGVuIG1hcmsgaW4gbmV3IHRhYicpXG4gICAgICAgICAgICAuc2V0RGVzYygnT3BlbiBhIGZpbGUgaW4gdGhlIG5ldyB0YWIgd2hlbiB1c2luZyBcImdvIHRvXCIgY29tbWFuZC4gSWYgZGlzYWJsZWQsIGl0IHdpbGwgb3BlbiB0aGUgZmlsZSBpbiB0aGUgY3VycmVudCB0YWIuJylcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuTWFya0luTmV3VGFiID8/IGRzLm9wZW5NYXJrSW5OZXdUYWIpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5vcGVuTWFya0luTmV3VGFiID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ05vIGR1cGxpY2F0aW9uIG9mIG9wZW5lZCBmaWxlcyB3aGVuIHVzaW5nIEdvIHRvIGNvbW1hbmRzIChleHBlcmltZW50YWwpJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdQcmV2ZW50cyBkdXBsaWNhdGUgdGFicyB3aGVuIHN3aXRjaGluZyB0byBhbHJlYWR5IG9wZW5lZCBmaWxlcyB1c2luZyB0aGUgbWFyayBsaXN0IGFmdGVyIHJlc3RhcnRpbmcgT2JzaWRpYW4uIChFeHBlcmltZW50YWw6IG1heSBub3Qgd29yayBpbiBmdXR1cmUgT2JzaWRpYW4gdmVyc2lvbnMuKScpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhwZXJpbWVudGFsR290byA/PyBkcy5leHBlcmltZW50YWxHb3RvKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZXhwZXJpbWVudGFsR290byA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbCkuc2V0TmFtZSgnR2VuZXJhbCByZWdpc3RlcnMnKS5zZXRIZWFkaW5nKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVnaXN0ZXJMaXN0U2V0dGluZyhjb250YWluZXJFbCwgXCJSZWdpc3RlciBsaXN0XCIsIGRzLnJlZ2lzdGVyTGlzdCwgJ0tleSBzeW1ib2xzIHRvIGJlIHVzZWQgYXMgcmVnaXN0ZXJzLiBPbmx5IGluY2x1ZGUgc3ltYm9scyB0aGF0IHlvdSBjYW4gaW5wdXQgd2l0aCBhIHNpbmdsZSBrZXlzdHJva2UuJywgJ3JlZ2lzdGVyTGlzdCcpXG4gICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGJ0bikgPT4ge1xuICAgICAgICAgICAgICAgIGJ0blxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbigncmVmcmVzaC1jY3cnKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcCgnUmVzZXQgdG8gZGVmYXVsdCByZWdpc3RlciBsaXN0JylcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucmVnaXN0ZXJMaXN0ID0gZHMucmVnaXN0ZXJMaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTsgLy8gUmVmcmVzaCB0aGUgc2V0dGluZ3MgdGFiIHRvIHNob3cgdGhlIHVwZGF0ZWQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdTb3J0IGFsbCBtYXJrcyBieSByZWdpc3RlciBsaXN0JylcbiAgICAgICAgICAgIC5zZXREZXNjKCdTb3J0IG1hcmtzIGJ5IHRoZSBvcmRlciBvZiB0aGUga2V5IHN5bWJvbHMgaW4gdGhlIHJlZ2lzdGVyIGxpc3QuIElmIGRpc2FibGVkLCBtYXJrcyB3aWxsIGJlIHNvcnRlZCBhbHBoYWJldGljYWxseSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgbG9jYWxlLicpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucmVnaXN0ZXJTb3J0QnlMaXN0ID8/IGRzLnJlZ2lzdGVyU29ydEJ5TGlzdClcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZ2lzdGVyU29ydEJ5TGlzdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAvLyBUT0RPOiBpbXBsZW1lbnQgdGhpcyBmZWF0dXJlXG4gICAgICAgIC8vIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAvLyAgICAgLnNldE5hbWUoJ0hpZGUgbWFyayBsaXN0JylcbiAgICAgICAgLy8gICAgIC5zZXREZXNjKCdIaWRlIHRoZSBnbG9iYWwgbWFyayBsaXN0IGZvciBib3RoIGNvbW1hbmRzIChmb3IgZmFzdCBpbnB1dCwgbm8gZmxpY2tlcikuJylcbiAgICAgICAgLy8gICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAvLyAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5oaWRlTWFya0xpc3REdXJpbmdJbnB1dCA/PyBkcy5oaWRlTWFya0xpc3REdXJpbmdJbnB1dClcbiAgICAgICAgLy8gICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgIC8vICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmhpZGVNYXJrTGlzdER1cmluZ0lucHV0ID0gdmFsdWU7XG4gICAgICAgIC8vICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAvLyAgICAgICAgIH0pKTtcblxuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKS5zZXROYW1lKCdIYXJwb29uIHJlZ2lzdGVycycpLnNldEhlYWRpbmcoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZWdpc3Rlckxpc3RTZXR0aW5nKGNvbnRhaW5lckVsLCBcIkhhcnBvb24gcmVnaXN0ZXIgbGlzdFwiLCBkcy5oYXJwb29uUmVnaXN0ZXJMaXN0LCAnS2V5IHN5bWJvbHMgdG8gYmUgdXNlZCBhcyBIYXJwb29uIHJlZ2lzdGVycy4gT25seSBpbmNsdWRlIHN5bWJvbHMgdGhhdCB5b3UgY2FuIGlucHV0IHdpdGggYSBzaW5nbGUga2V5c3Ryb2tlLicsICdoYXJwb29uUmVnaXN0ZXJMaXN0JylcbiAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYnRuKSA9PiB7XG4gICAgICAgICAgICAgICAgYnRuXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKCdyZWZyZXNoLWNjdycpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKCdSZXNldCB0byBkZWZhdWx0IEhhcnBvb24gcmVnaXN0ZXIgbGlzdCcpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmhhcnBvb25SZWdpc3Rlckxpc3QgPSBkcy5oYXJwb29uUmVnaXN0ZXJMaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTsgLy8gUmVmcmVzaCB0aGUgc2V0dGluZ3MgdGFiIHRvIHNob3cgdGhlIHVwZGF0ZWQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSlcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdTb3J0IEhhcnBvb24gbWFya3MgYnkgSGFycG9vbiByZWdpc3RlciBsaXN0JylcbiAgICAgICAgICAgIC5zZXREZXNjKCdTb3J0IEhhcnBvb24gbWFya3MgYnkgdGhlIG9yZGVyIG9mIHRoZSBrZXkgc3ltYm9scyBpbiB0aGUgSGFycG9vbiByZWdpc3RlciBsaXN0LiBJZiBkaXNhYmxlZCwgbWFya3Mgd2lsbCBiZSBzb3J0ZWQgYWxwaGFiZXRpY2FsbHkgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IGxvY2FsZS4nKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmhhcnBvb25SZWdpc3RlclNvcnRCeUxpc3QgPz8gZHMuaGFycG9vblJlZ2lzdGVyU29ydEJ5TGlzdClcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmhhcnBvb25SZWdpc3RlclNvcnRCeUxpc3QgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnUmVtb3ZlIGdhcHMgaW5iZXR3ZWVuIEhhcnBvb24gbWFya3MnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0hhcnBvb24gbWFya3Mgd2lsbCBiZSBzaGlmdGVkIHRvIHRoZSBsZWZ0IGZvciBldmVyeSBnYXAgKHJlZ2lzdGVyIHdpdGggbm8gbWFyaykgYmFzZWQgb24gdGhlIG9yZGVyIG9mIHRoZSBIYXJwb29uIHJlZ2lzdGVyIGxpc3QuJylcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5oYXJwb29uUmVnaXN0ZXJHYXBSZW1vdmFsID8/IGRzLmhhcnBvb25SZWdpc3RlckdhcFJlbW92YWwpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5oYXJwb29uUmVnaXN0ZXJHYXBSZW1vdmFsID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG5cbiAgICAgICAgLy8gQWRkIGtleWJvYXJkIHNob3J0Y3V0IHNldHRpbmdzXG4gICAgICAgIC8vIFRPRE86IHNldHRpbmcgdGhvc2UgdmFsdWVzIGhlcmUgbGlrZSBmZWVscyB3cm9uZywgZXNwZWNpYWxseSBwYXNzaW5nIG9iamVjdCBwcm9wZXJ0eSBhcyBzdHJpbmdcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiAnTGlzdCBuYXZpZ2F0aW9uIHNob3J0Y3V0cycgfSk7XG4gICAgICAgIHRoaXMuY3JlYXRlU2hvcnRjdXRTZXR0aW5nKGNvbnRhaW5lckVsLCAnVXAnLCBkcy5tb2RhbExpc3RVcCwgJ1Nob3J0Y3V0IGZvciBtb3ZpbmcgdXAgaW4gdGhlIGxpc3QnLCAnbW9kYWxMaXN0VXAnKTtcbiAgICAgICAgdGhpcy5jcmVhdGVTaG9ydGN1dFNldHRpbmcoY29udGFpbmVyRWwsICdEb3duJywgZHMubW9kYWxMaXN0RG93biwgJ1Nob3J0Y3V0IGZvciBtb3ZpbmcgZG93biBpbiB0aGUgbGlzdCcsICdtb2RhbExpc3REb3duJyk7XG4gICAgICAgIHRoaXMuY3JlYXRlU2hvcnRjdXRTZXR0aW5nKGNvbnRhaW5lckVsLCAnU2VsZWN0IG1hcmsnLCBkcy5tb2RhbExpc3RTZWxlY3QsICdTaG9ydGN1dCBmb3Igc2VsZWN0aW5nIGEgbWFyaycsICdtb2RhbExpc3RTZWxlY3QnKTtcbiAgICAgICAgdGhpcy5jcmVhdGVTaG9ydGN1dFNldHRpbmcoY29udGFpbmVyRWwsICdDYW5jZWwgbW9kYWwnLCBkcy5tb2RhbExpc3RDYW5jZWwsICdTaG9ydGN1dCBmb3IgY2FuY2VsbGluZyB0aGUgbW9kYWwnLCAnbW9kYWxMaXN0Q2FuY2VsJyk7XG4gICAgICAgIHRoaXMuY3JlYXRlU2hvcnRjdXRTZXR0aW5nKGNvbnRhaW5lckVsLCAnRGVsZXRlIG1hcmsnLCBkcy5tb2RhbExpc3REZWxldGUsICdTaG9ydGN1dCBmb3IgZGVsZXRpbmcgYSBtYXJrJywgJ21vZGFsTGlzdERlbGV0ZScpO1xuICAgICAgICB0aGlzLmNyZWF0ZVNob3J0Y3V0U2V0dGluZyhjb250YWluZXJFbCwgJ1Jlc3RvcmUgbGFzdCBjaGFuZ2VkIG1hcmsnLCBkcy5tb2RhbExpc3RVbmRvLCAnU2hvcnRjdXQgZm9yIHVuZG9pbmcgbGFzdCBhY3Rpb24gb2YgY2hhbmdpbmcgYSBtYXJrJywgJ21vZGFsTGlzdFVuZG8nKTtcblxuXG4gICAgfVxuXG4gICAgLy8gdXNlIG9ubHkgZm9yIHN0cmluZyB2YWx1ZXMgZnJvbSBTZXR0aW5ncyB0eXBlXG4gICAgY3JlYXRlU2hvcnRjdXRTZXR0aW5nKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCwgbmFtZTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IHN0cmluZywgZGVzYzogc3RyaW5nLCBrZXk6IGtleW9mIE9ic2lkaWFuTWFya3NTZXR0aW5ncykge1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKG5hbWUpXG4gICAgICAgICAgICAuc2V0RGVzYyhkZXNjKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKFN0cmluZyh0aGlzLnBsdWdpbi5zZXR0aW5nc1trZXldID8/IGRlZmF1bHRWYWx1ZSkpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAodGhpcy5wbHVnaW4uc2V0dGluZ3MgYXMgYW55KVtrZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBjcmVhdGVSZWdpc3Rlckxpc3RTZXR0aW5nKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCwgbmFtZTogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IHN0cmluZywgZGVzYzogc3RyaW5nLCBrZXk6IGtleW9mIE9ic2lkaWFuTWFya3NTZXR0aW5ncyk6IFNldHRpbmcge1xuICAgICAgICByZXR1cm4gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZShuYW1lKVxuICAgICAgICAgICAgLnNldERlc2MoZGVzYylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShTdHJpbmcodGhpcy5wbHVnaW4uc2V0dGluZ3Nba2V5XSA/PyBkZWZhdWx0VmFsdWUpKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMucGx1Z2luLnNldHRpbmdzIGFzIGFueSlba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgfVxufSIsICJpbXBvcnQgeyBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCBUZXRoZXJNYXJrc1BsdWdpbiBmcm9tICcuLi9tYWluJztcclxuaW1wb3J0IHsgZGVmYXVsdE9ic2lkaWFuTWFya3NTZXR0aW5ncywgSlNPTnNjaGVtYVZlcnNpb24gYXMgbGF0ZXN0SlNPTlNjaGVtYVZlcnNpb24gfSBmcm9tICcuL2RlZmF1bHRWYWx1ZXMnO1xyXG5pbXBvcnQgeyBNYXJrfSBmcm9tICd0ZXRoZXItbWFya3MtY29yZSc7XHJcbmltcG9ydCB7IE9ic2lkaWFuTWFya3NTZXR0aW5ncyB9IGZyb20gJy4uL3R5cGVzJztcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkU2V0dGluZ3MocGx1Z2luOiBUZXRoZXJNYXJrc1BsdWdpbik6IFByb21pc2U8T2JzaWRpYW5NYXJrc1NldHRpbmdzPiB7XHJcbiAgICByZXR1cm4gKGF3YWl0IHBsdWdpbi5sb2FkRGF0YSgpKT8uc2V0dGluZ3MgfHwgZGVmYXVsdE9ic2lkaWFuTWFya3NTZXR0aW5ncztcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmVTZXR0aW5ncyhwbHVnaW46IFRldGhlck1hcmtzUGx1Z2luLCBzZXR0aW5nczogT2JzaWRpYW5NYXJrc1NldHRpbmdzKSB7XHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcGx1Z2luLmxvYWREYXRhKCkgfHwge307XHJcbiAgICBkYXRhLnNldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICBhd2FpdCBwbHVnaW4uc2F2ZURhdGEoZGF0YSk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkTWFya3MocGx1Z2luOiBUZXRoZXJNYXJrc1BsdWdpbik6IFByb21pc2U8TWFya1tdPiB7XHJcbiAgICByZXR1cm4gKGF3YWl0IHBsdWdpbi5sb2FkRGF0YSgpKT8ubWFya3MgfHwgW107XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzYXZlTWFya3MocGx1Z2luOiBUZXRoZXJNYXJrc1BsdWdpbiwgbWFya3M6IE1hcmtbXSkge1xyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHBsdWdpbi5sb2FkRGF0YSgpIHx8IHt9O1xyXG4gICAgZGF0YS5tYXJrcyA9IG1hcmtzO1xyXG4gICAgYXdhaXQgcGx1Z2luLnNhdmVEYXRhKGRhdGEpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZExhc3RDaGFuZ2VkTWFyayhwbHVnaW46IFRldGhlck1hcmtzUGx1Z2luKTogUHJvbWlzZTxNYXJrPiB7XHJcbiAgICByZXR1cm4gKGF3YWl0IHBsdWdpbi5sb2FkRGF0YSgpKT8ubGFzdENoYW5nZWRNYXJrIHx8IHt9O1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZUxhc3RDaGFuZ2VkTWFyayhwbHVnaW46IFRldGhlck1hcmtzUGx1Z2luLCBsYXN0Q2hhbmdlZE1hcms6IE1hcmspIHtcclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwbHVnaW4ubG9hZERhdGEoKSB8fCB7fTtcclxuICAgIGRhdGEubGFzdENoYW5nZWRNYXJrID0gbGFzdENoYW5nZWRNYXJrO1xyXG4gICAgYXdhaXQgcGx1Z2luLnNhdmVEYXRhKGRhdGEpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gSlNPTnNjaGVtYUNoZWNrKHBsdWdpbjogVGV0aGVyTWFya3NQbHVnaW4pIHtcclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBwbHVnaW4ubG9hZERhdGEoKTtcclxuXHJcbiAgICBpZiAoIWRhdGEgfHwgIWRhdGEuc2NoZW1hVmVyc2lvbil7XHJcbiAgICAgICAgYXdhaXQgcGx1Z2luLnNhdmVEYXRhKHtzY2hlbWFWZXJzaW9uOiBsYXRlc3RKU09OU2NoZW1hVmVyc2lvbiwgLi4uZGF0YX0pXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRhdGEuc2NoZW1hVmVyc2lvbiA9PT0gbGF0ZXN0SlNPTlNjaGVtYVZlcnNpb24pe1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIG5ldyBOb3RpY2UocGx1Z2luLm1hbmlmZXN0Lm5hbWUgKyBcIjogRmF1bHR5IGRhdGEuIENoZWNrIGRldmVsb3BlciB0b29scyBmb3IgbW9yZSBpbmZvLlwiKTtcclxuICAgIGNvbnNvbGUuZXJyb3IocGx1Z2luLm1hbmlmZXN0LmlkICsgXCI6IFRoZSBkYXRhIGxvYWRlZCBpcyBub3QgaW4gY29ycmVjdCBmb3JtYXQuIFRoZSBwbHVnaW4gbWF5IG5vdCB3b3JrIHByb3Blcmx5LiBUaGlzIHVzdWFsbHkgaGFwcGVucyBhZnRlciBwbHVnaW4gdXBkYXRlIHRoYXQgY2hhbmdlcyB0aGUgSlNPTiBzY2hlbWEuIFwiKTtcclxuICAgIC8vIFRPRE86IG1ha2UgYXV0b21hdGljIGNvbnZlcnNpb25zIGhlcmUgaWYgbmVjZXNzYXJ5IGluIHRoZSBmdXR1cmUuIEJlIHN1cmUgdG8gc2F2ZSB0aGUgbGVnYWN5IHByZSBjb252ZXJzaW9uIGRhdGEgYXMgYmFja3VwIGluIHRoZSBcImxlZ2FjeVNjaGVtYURhdGFcIiBmaWVsZC4gXHJcbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFBLG1CQUF1Qjs7O0FDQXZCLElBQUFDLG1CQUF1Qjs7O0FDQWhCLFNBQVMsd0JBQXdCLE9BQU8sV0FBVztBQUN0RCxhQUFXLE9BQU8sV0FBVztBQUd6QixRQUFJLENBQUUsTUFBTSxJQUFJLE9BQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxHQUFHLEdBQUk7QUFDM0MsYUFBTztBQUFBLElBQ1g7QUFBQSxFQUNKO0FBQ0EsU0FBTztBQUNYO0FBQ08sU0FBUyxnQkFBZ0IsT0FBTyxRQUFRO0FBQzNDLFNBQU8sTUFBTSxLQUFLLE9BQUssRUFBRSxXQUFXLE1BQU07QUFDOUM7QUFDTyxTQUFTLHdCQUF3QixPQUFPO0FBQzNDLFFBQU0sS0FBSyxDQUFDLEdBQUcsTUFBTSxFQUFFLE9BQU8sY0FBYyxFQUFFLE1BQU0sQ0FBQztBQUN6RDtBQUNPLFNBQVMsMEJBQTBCLE9BQU8sZUFBZSxVQUFVO0FBQ3RFLFFBQU0scUJBQXFCLElBQUksS0FBSyxDQUFDLGdCQUFnQixTQUFTLGVBQWUsU0FBUyxxQkFBcUIsTUFBTSxFQUFFLENBQUM7QUFDcEgsUUFBTSxnQkFB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SjtBQUVBLE1BQUksd0JBQU8sT0FBTyxTQUFTLE9BQU8scURBQXFEO0FBQ3ZGLFVBQVEsTUFBTSxPQUFPLFNBQVMsS0FBSyx1SkFBdUo7QUFFOUw7OztBVjNDQSxJQUFxQixvQkFBckIsY0FBK0Msd0JBQU87QUFBQSxFQUF0RDtBQUFBO0FBRUksaUJBQWdCLENBQUM7QUFDakIsMkJBQStCO0FBQUE7QUFBQSxFQUUvQixNQUFNLFNBQVM7QUFDWCxVQUFNLGdCQUFnQixJQUFJO0FBRTFCLFNBQUssV0FBVyxNQUFNLGFBQWEsSUFBSTtBQUN2QyxTQUFLLFFBQVEsTUFBTSxVQUFVLElBQUk7QUFDakMsU0FBSyxrQkFBa0IsTUFBTSxvQkFBb0IsSUFBSTtBQUVyRCxTQUFLLFdBQVc7QUFBQSxNQUNaLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLFVBQVUsTUFBTSxjQUFjLElBQUk7QUFBQSxJQUN0QyxDQUFDO0FBSUQsU0FBSyxXQUFXO0FBQUEsTUFDWixJQUFJO0FBQUEsTUFDSixNQUFNO0FBQUEsTUFDTixVQUFVLE1BQU0sZUFBZSxJQUFJO0FBQUEsSUFDdkMsQ0FBQztBQUVELFNBQUssV0FBVztBQUFBLE1BQ1osSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNLGlCQUFpQixJQUFJO0FBQUEsSUFDekMsQ0FBQztBQUVELFNBQUssV0FBVztBQUFBLE1BQ1osSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNLGlCQUFpQixJQUFJO0FBQUEsSUFDekMsQ0FBQztBQUVELFNBQUssV0FBVztBQUFBLE1BQ1osSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNLGdCQUFnQixJQUFJO0FBQUEsSUFDeEMsQ0FBQztBQUVELFNBQUssY0FBYyxJQUFJLFlBQVksS0FBSyxLQUFLLElBQUksQ0FBQztBQUVsRCxZQUFRLElBQUksYUFBYSxLQUFLLFNBQVMsRUFBRTtBQUFBLEVBQzdDO0FBQUEsRUFFQSxNQUFNLGVBQWU7QUFDakIsVUFBTSxhQUFhLE1BQU0sS0FBSyxRQUFRO0FBQUEsRUFDMUM7QUFBQSxFQUVBLE1BQU0sVUFBVSxPQUFlO0FBQzNCLFNBQUssUUFBUTtBQUNiLFVBQU0sVUFBVSxNQUFNLEtBQUs7QUFBQSxFQUMvQjtBQUFBLEVBRUEsTUFBTSxvQkFBb0IsaUJBQXVCO0FBQzdDLFNBQUssa0JBQWtCO0FBQ3ZCLFVBQU0sb0JBQW9CLE1BQU0sZUFBZTtBQUFBLEVBQ25EO0FBQUEsRUFFQSxXQUFXO0FBQ1AsWUFBUSxJQUFJLGVBQWUsS0FBSyxTQUFTLEVBQUU7QUFBQSxFQUMvQztBQUNKOyIsCiAgIm5hbWVzIjogWyJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIl0KfQo=
